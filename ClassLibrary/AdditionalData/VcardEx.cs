///////////////////////////////////////////////////////////////////////////////////////
//	File:	VcardEx.cs													3 May 16 PHR
//
//	Description:	This file is an extension of the vcard.cs file. vcard.cs is
//					generated by the xsd.exe utility program from the XML schema file
//					called vcard.xsd. This file implements the constructors to
//					use when programmatically de-serializing the type for the XML
//					version for a vcard. The XML version of a vcard is also called an
//					xcard.
//
//	Revised:	2 Dec 22 PHR
//				  -- Added the Country property
//				9 Jan 23 PHR
//				  -- Added partial class vcards
//				  -- Added documentation comments
///////////////////////////////////////////////////////////////////////////////////////

using System.Xml;
using System.Xml.Serialization;

namespace AdditionalData
{
	/// <summary>
	/// This is the class for the root element of an xcard.
	/// </summary>
	public partial class vcardType
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public vcardType()
		{
		}

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public vcardType(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "adr":
						adr = (adr[])AddObjToObjArray(adr, new adr(Node),
							typeof(adr));
						break;
					case "anniversary":
						anniversary = new anniversary(Node);
						break;
					case "bday":
						bday = new bday(Node);
						break;
					case "caladruri":
						caladruri = (caladruri[]) AddObjToObjArray(caladruri,
							new caladruri(Node), typeof(caladruri));
						break;
					case "caluri":
						caluri = (caluri[]) AddObjToObjArray(caluri, new caluri(Node), typeof(caluri));
						break;
					case "categories":
						categories = (categories[]) AddObjToObjArray(categories, new categories(Node), 
							typeof(categories));
						break;
					case "clientpidmap":
						clientpidmap = (clientpidmap[]) AddObjToObjArray(clientpidmap, 
							new clientpidmap(Node), typeof(clientpidmap));
						break;
					case "email":
						email = (email[]) AddObjToObjArray(email, new email(Node), typeof(email));
						break;
					case "fburl":
						fburl = (fburl[]) AddObjToObjArray(fburl, new fburl(Node), typeof(fburl));
						break;
					case "fn":
						fn = (fn[]) AddObjToObjArray(fn, new fn(Node), typeof(fn));
						break;
					case "geo":
						geo = (vcardTypeGeo[]) AddObjToObjArray(geo, new vcardTypeGeo(Node), 
							typeof(vcardTypeGeo));
						break;
					case "impp":
						impp = (impp[]) AddObjToObjArray(impp, new impp(Node), typeof(impp));
						break;
					case "key":
						key = (key[]) AddObjToObjArray(key, new key(Node), typeof(key));
						break;
					case "kind":
						kind = new kind(Node);
						break;
					case "lang":
						lang = (lang[]) AddObjToObjArray(lang, new lang(Node), typeof(lang));
						break;
					case "logo":
						logo = (logo[]) AddObjToObjArray(logo, new logo(Node), typeof(logo));
						break;
					case "member":
						member = (member[]) AddObjToObjArray(member, new member(Node), typeof(member));
						break;
					case "n":
						n = new n(Node);
						break;
					case "nickname":
						nickname = (nickname[]) AddObjToObjArray(nickname, new nickname(Node), 
							typeof(nickname));
						break;
					case "note":
						note = (note[]) AddObjToObjArray(note, new note(Node), typeof(note));
						break;
					case "org":
						org = (org[]) AddObjToObjArray(org, new org(Node), typeof(org));
						break;
					case "photo":
						photo = (photo[]) AddObjToObjArray(photo, new photo(Node), typeof(photo));
						break;
					case "prodid":
						prodid = new prodid(Node);
						break;
					case "related":
						related = (related[]) AddObjToObjArray(related, new related(Node), typeof(related));
						break;
					case "rev":
						rev = new valuetimestamp(Node);
						break;
					case "role":
						role = (role[]) AddObjToObjArray(role, new role(Node), typeof(role));
						break;
					case "gender":
						gender = new gender(Node);
						break;
					case "sound":
						sound = (sound[]) AddObjToObjArray(sound, new sound(Node), typeof(sound));
						break;
					case "source":
						source = (source[]) AddObjToObjArray(source, new source(Node), typeof(source));
						break;
					case "tel":
						tel = (tel[]) AddObjToObjArray(tel, new tel(Node), typeof(tel));
						break;
					case "title":
						title = (title[]) AddObjToObjArray(title, new title(Node), typeof(title));
						break;
					case "tz":
						tz = (vcardTypeTZ[]) AddObjToObjArray(tz, new vcardTypeTZ(Node), 
							typeof(vcardTypeTZ));
						break;
					case "uid":
						uid = new uid(Node);
						break;
					case "url":
						url = (url[]) AddObjToObjArray(url, new url(Node), typeof(url));
						break;
					case "group":
						group = (group[]) AddObjToObjArray(group, new group(Node), typeof(group));
						break;
				} // end switch
			}
		}

		/// <summary>
		/// Gets or sets the first fn (formatted full name) field of the vcardType. Returns null if not
		/// set. The setter creates the "fn" array field if it is null.
		/// </summary>
		[XmlIgnore]
		public string FullName
		{
			get { return fn?[0].text; }
			set
			{
				if (fn == null)
					fn = new fn[1];

				fn[0].text = value;
			}
		}

		/// <summary>
		/// Gets or sets the first (given) name in the "n" field. Returns null if not set. The setter creates 
		/// the "n" array if it is null.
		/// </summary>
		[XmlIgnore]
		public string FirstName
        {
			get
            {
				return n?.given?[0];
            }
			set
            {
				if (n == null)
					n = new n();

				n.given = new string[1];
				n.given[0] = value;
            }
        }

		/// <summary>
		/// Gets or sets the last name (surname) in the "n" field. Returns null if not set. The setter creates 
		/// the "n" array if it is null.
		/// </summary>
		[XmlIgnore]
		public string LastName
        {
			get
            {
				return n?.surname?[0];
            }
			set
            {
				if (n == null)
					n = new n();

				n.surname = new string[1];
				n.surname[0] = value;
            }
        }

		/// <summary>
		/// Gets or sets the middle name in the "n" field. Returns null if not set. The setter creates the "n" 
		/// array if it is null.
		/// </summary>
		[XmlIgnore]
		public string MiddleName
        {
			get { return n?.additional?[0]; }
			set
            {
				if (n == null)
					n = new n();

				n.additional = new string[1];
				n.additional[0] = value;
			}
		}

		/// <summary>
		/// Gets or sets the first name prefix (Mr., Mrs., Ms., etc) in the "n" field. Returns null if not
		/// set. The setter creates the "n" array if it is null.
		/// </summary>
		[XmlIgnore]
		public string Prefix
        {
			get { return n?.prefix?[0]; }
			set
            {
				if (n == null)
					n = new n();

				n.prefix = new string[1];
				n.prefix[0] = value;
            }
        }

		/// <summary>
		/// Gets or sets the first suffix field of the "n" field. Returns null if not set. The setter creates
		/// the "n" array if it is null. 
		/// </summary>
		[XmlIgnore]
		public string Suffix
		{
			get { return n?.suffix[0]; }
			set
			{
				if (n == null)
					n = new n();

				n.suffix = new string[1];
				n.suffix[0] = value;
			}
		}

		/// <summary>
		/// Gets or sets the first street address field of the first address in the "adr" field. Returns null
		/// if not set. The setter creates the "adr" array if it is null.
		/// in the vcardType
		/// </summary>
		[XmlIgnore]
		public string Street
        {
			get
			{ 
				return adr?[0]?.street?[0]; 
			}
			set
            {
				if (adr == null)
				{
					adr = new adr[1];
					adr[0] = new adr();
				}

                adr[0].street = new string[1];
                adr[0].street[0] = value;
            }
        }

		/// <summary>
		/// Gets or sets the first locality (city) of the first address in the "adr" field. Returns null if
		/// not set. The setter creates the "adr" array if it is null.
		/// </summary>
		[XmlIgnore]
		public string City
        {
			get { return adr?[0]?.locality?[0]; }
			set
            {
				if (adr == null)
				{
					adr = new adr[1];
					adr[0] = new adr();
				}

				adr[0].locality = new string[1];
				adr[0].locality[0] = value;
            }
        }

		/// <summary>
		/// Gets or sets the first region (state) in the first address of the "adr" field. Returns null if
		/// not set. The setter creates the "adr" array if it is null.
		/// </summary>
		[XmlIgnore]
		public string State
        {
			get { return adr?[0]?.region?[0]; }
			set
            {
				if (adr == null)
				{
					adr = new adr[1];
					adr[0] = new adr();
				}

				adr[0].region = new string[1];
				adr[0].region[0] = value;
            }
        }

		/// <summary>
		/// Gets or sets the first code (zip code) element of the first address in the "adr" field. Returns null
		/// if not set. The setter creates the "adr" array if it is null.
		/// </summary>
		[XmlIgnore]
		public string ZipCode
        {
			get { return adr?[0]?.code?[0]; }
			set
            {
				if (adr == null)
				{
					adr = new adr[1];
					adr[0] = new adr();
				}

				adr[0].code = new string[1];
				adr[0].code[0] = value;
            }
        }

        /// <summary>
        /// Gets or sets the country element of the first address in the "adr" field. Returns null if not
		/// set. The setter creates the "adr" array if it is null.
        /// </summary>
        [XmlIgnore]
		public string Country
		{
			get { return adr?[0]?.country?[0]; }
			set
			{
				if (adr == null)
				{
					adr = new adr[1];
					adr[0] = new adr();
				}

				adr[0].country = new string[1];
				adr[0].country[0] = value;
			}
		}

		/// <summary>
		/// Gets or sets the first pobox element of the first address in the "adr" field. Returns null if not
		/// set. The setter creates the "adr" array if it is null.
		/// </summary>
		[XmlIgnore]
		public string PoBox
        {
			get { return adr?[0]?.pobox?[0]; }
			set
            {
				if (adr == null)
				{
					adr = new adr[1];
					adr[0] = new adr();
				}

				adr[0].pobox = new string[1];
				adr[0].pobox[0] = value;
            }
        }

		/// <summary>
		/// Gets or sets the extended (ext) address field of the first address in the "adr" field. Returns null
		/// if not set. The setter creates the "adr" array if it is null.
		/// </summary>
		[XmlIgnore]
		public string Ext
		{
			get { return adr?[0].ext?[0]; }
			set
			{
				if (adr == null)
				{
					adr = new adr[1];
					adr[0] = new adr();
				}

				adr[0].ext = new string[1];
				adr[0].ext[0] = value;
			}
		}

		/// <summary>
		/// Gets or sets the first telephone number in the "tel" field. Returns null if not set. The setter 
		/// creates the "tel" array if it is null.
		/// Telephone numbers are treated as 10-digit numeric strings by this
		/// property.
		/// </summary>
		[XmlIgnore]
		public string TelephoneNumber
        {
			get
            {
				if (tel == null || tel.Length == 0)
					return null;

				string strTelNum = null;
				if (tel[0].ItemElementName == TelItemChoiceEnum.text)
					strTelNum = tel[0].Item;
				else
                {   // Its a URI because only text and uri are allowed.
					// TODO: strip out the URI formatting and return a 10-digit
					// phone number
					strTelNum = tel[0].Item;
                }

				return strTelNum;
            }
			set
            {
				tel = new tel[1];
				tel[0] = new tel();
				tel[0].ItemElementName = TelItemChoiceEnum.text;
				tel[0].Item = value;
            }
        }

		/// <summary>
		/// Gets or sets the first email address. Returns null if not set. The setter creates the "email"
		/// array if it is null.
		/// </summary>
		[XmlIgnore]
		public string EMail
        {
			get { return email?[0]?.text; }
			set
            {
				if (email == null)
                {
					email = new email[1];
					email[0] = new email();
                }

				email[0].text = value;
            }
        }

		/// <summary>
		/// Adds an object to an array of objects of a specified type. This is a static method.
		/// </summary>
		/// <param name="ObjAry">Original array objects. May be null.</param>
		/// <param name="Obj">Object to add to the end of the array.</param>
		/// <param name="type">Type of the object array and the array elements</param>
		/// <returns>Returns a new instance of the object array.</returns>
		public static Object[] AddObjToObjArray(Object[] ObjAry, Object Obj, Type type)
		{
			Object[] NewArray = null;
			if (ObjAry == null)
			{
				NewArray = (Object[])Array.CreateInstance(type, 1);
				NewArray[0] = Obj;
			}
			else
			{
				NewArray = (Object[])Array.CreateInstance(type, ObjAry.Length +
					1);
				for (int i = 0; i < ObjAry.Length; i++)
					NewArray[i] = ObjAry[i];

				NewArray[ObjAry.Length] = Obj;
			}

			return NewArray;
		}

		/// <summary>
		/// Adds a new String to an array of strings. This is a static method.
		/// </summary>
		/// <param name="StrAry">Input and output array of String objects. May be null.</param>
		/// <param name="strNewItem">Input String object to add to the array.</param>
		public static void AddStringItem(ref String[] StrAry, String strNewItem)
		{
			if (StrAry == null)
			{
				StrAry = new String[1];
				StrAry[0] = strNewItem;
			}
			else
			{
				String[] NewAry = new String[StrAry.Length + 1];
				for (int i=0; i < StrAry.Length; i++)
					NewAry[i] = StrAry[i];

				NewAry[StrAry.Length] = strNewItem;
				StrAry = NewAry;
			}
		}

		/// <summary>
		/// Sets the first element of a string array to a specified value. If the string array
		/// is null, then an array of length 1 is created.
		/// </summary>
		/// <param name="StrAry">Input string array</param>
		/// <param name="Value">Value to set the first item to.</param>
		public static void SetFirstStringItem(ref string[] StrAry, string Value)
		{
			if (StrAry == null)
				StrAry = new string[1];

			StrAry[0] = Value;
		}

		/// <summary>
		/// Converts a String to a typeText enumeration value. This is a static method.
		/// </summary>
		/// <param name="str">Input String value.</param>
		/// <returns>Returns a typeText enumeration value. Returns a default of
		/// typeText.home.</returns>
		public static typeText StringTotypeTextEnum(String str)
		{
			typeText RetVal = typeText.home;
			switch (str)
			{
				case "work":
					RetVal = typeText.work;
					break;
				case "home":
					RetVal = typeText.home;
					break;
			}
			return RetVal;
		}

		/// <summary>
		/// Adds a typeText enumeration value to an array of typeText enumeration values. This is a static 
		/// function.
		/// </summary>
		/// <param name="TtAry">Input and output array of typeText enumeration values.</param>
		/// <param name="Node">XmlNode containing an array of "text" XML elements.
		/// </param>
		public static void AddTypeText(ref typeText[] TtAry, XmlNode Node)
		{
			typeText Tt = typeText.home;

			foreach (XmlNode Child in Node.ChildNodes)
			{
				if (Child.LocalName == "text")
				{
					Tt = vcardType.StringTotypeTextEnum(Child.InnerText);

					if (TtAry == null)
					{
						TtAry = new typeText[1];
						TtAry[0] = Tt;
					}
					else
					{
						typeText[] NewAry = new typeText[TtAry.Length + 1];
						for (int i = 0; i < TtAry.Length; i++)
							NewAry[i] = TtAry[i];

						NewAry[TtAry.Length] = Tt;
						TtAry = NewAry;
					}
				}
			}
		}
	}

	/// <summary>
	/// Class that contains multiple vcards (vcardType objects)
	/// </summary>
	public partial class vcards
	{
        /// <summary>
        /// Default constructor. Used for de-serialization using XmlSerializer or to create a new object of 
		/// this type.
        /// </summary>
        public vcards()
		{
		}

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public vcards(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "vcard":
						vcard = (vcardType[])vcardType.AddObjToObjArray(vcard, new vcardType(Node),
							typeof(vcardType));
						break;
				} // end switch
			} // end foreach
		}
	}

    /// <summary>
    /// Specifies the components of the delivery address for the vCard object.
	/// See Section 6.3.1 of RFC 6350.
	/// </summary>
	public partial class adr
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public adr()
		{
		}

		/// <summary>
		/// Constructor used when programmatically parsing a XML document.
		/// </summary>
		/// <param name="Root">Root node containing the XML for this type</param>
		public adr(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "parameters":
						parameters = new adrParameters(Node);
						break;
					case "pobox":
						vcardType.AddStringItem(ref pobox, Node.InnerText);
						break;
					case "ext":
						vcardType.AddStringItem(ref ext, Node.InnerText);
						break;
					case "street":
						vcardType.AddStringItem(ref street, Node.InnerText);
						break;
					case "locality":
						vcardType.AddStringItem(ref locality, Node.InnerText);
						break;
					case "region":
						vcardType.AddStringItem(ref region, Node.InnerText);
						break;
					case "code":
						vcardType.AddStringItem(ref code, Node.InnerText);
						break;
					case "country":
						vcardType.AddStringItem(ref country, Node.InnerText);
						break;
				}
			}
		}

		/// <summary>
		/// Gets or sets the first pobox field. Returns null if not set. The setter creates the "pobox" 
		/// array if it is null.
		/// </summary>
		[XmlIgnore]
		public string PoBox
		{
			get { return pobox?[0]; }
			set { vcardType.SetFirstStringItem(ref pobox, value); }
		}

		/// <summary>
		/// Gets or sets the first ext (extended address information) field. This field can contain extended 
		/// address information such as suite numbers, etc. Returns null if not set. The setter creates the 
		/// "ext" array if it is null.
		/// </summary>
		[XmlIgnore]
		public string Ext
		{
			get { return ext?[0]; }
			set { vcardType.SetFirstStringItem(ref ext, value); }
		}

		/// <summary>
		/// Gets or sets the first street field. The street field is the full street address that includes 
		/// house number, street name and any prefixes and suffixes. Returns null if not set. The setter creates
		/// the "street" array if it is null.
		/// </summary>
		[XmlIgnore]
		public string Street
		{
			get { return street?[0]; }
			set { vcardType.SetFirstStringItem(ref street, value); }
		}

		/// <summary>
		/// Gets or sets the first City (locality) field. Returns null if not set. The setter creates the 
		/// "locality" array if it is null.
		/// </summary>
		[XmlIgnore]
		public string City
		{
			get { return locality?[0]; }
			set { vcardType.SetFirstStringItem(ref locality, value); }
		}

		/// <summary>
		/// Gets or sets the first State (region) field. Returns null if not set. The setter creates the 
		/// "region" array if it is null.
		/// </summary>
		[XmlIgnore]
		public string State
		{
			get { return region?[0]; }
			set { vcardType.SetFirstStringItem(ref region, value); }
		}

		/// <summary>
		/// Gets or sets the first ZipCode (code) field. Returns null if not set. The setter creates the 
		/// "code" array if it is null.
		/// </summary>
		[XmlIgnore]
		public string ZipCode
		{
			get { return code?[0]; }
			set { vcardType.SetFirstStringItem(ref code, value); }
		}

		/// <summary>
		/// Gets or sets the first country field. Returns null if not set. The setter creates the "country" 
		/// array if it is null.
		/// </summary>
		[XmlIgnore]
		public string Country
		{
			get { return country?[0]; }
			set { vcardType.SetFirstStringItem(ref country, value); }
		}


		/// <summary>
		/// Gets or sets the first type field value for the address. Returns null if not set. The setter 
		/// creates the "type" array if it is null.
		/// </summary>
		[XmlIgnore]
		public typeText AddressType
		{
			get
			{
				if (parameters == null)
					return typeText.home;	// Return a default value.
				else
					return parameters.type[0];
			}
			set
			{
				if (parameters == null)
				{
					parameters = new adrParameters();
					parameters.type = new typeText[1];
					parameters.type[0] = value;
				}
				else
					parameters.type[0] = value;
			}
		}

		/// <summary>
		/// Gets or sets the pref (preference) value of the adr object. The preference is an integer greater 
		/// than 1 stored as a string. A lower preference value indicates a higher preference.
		/// See Section 5.3 of RFC 6350. Returns "1" if not set.
		/// </summary>
		[XmlIgnore]
		public string Pref
		{
			get
			{
				if (parameters?.pref?.integer == null)
					return "1";     // Not set so return a default value
				else
					return parameters.pref.integer;
			}
			set
			{
				if (parameters == null)
					parameters = new adrParameters();

				parameters.pref = new pref();
				parameters.pref.integer = value;
			}
		}
	}

	/// <summary>
	/// Class for the parameters of the adr (address) class. See Section 6.3.1 of RFC 6350.
	/// </summary>
	public partial class adrParameters
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public adrParameters() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public adrParameters(XmlNode Root)
		{
			foreach (XmlNode Node in Root)
			{
				switch (Node.LocalName)
				{
					case "language":
						language = new language(Node);
						break;
					case "altid":
						altid = new altid(Node);
						break;
					case "pid":
						vcardType.AddStringItem(ref pid, Node.InnerText);
						break;
					case "pref":
						pref = new pref(Node);
						break;
					case "type":
						vcardType.AddTypeText(ref type, Node);
						break;
					case "geo":
						geo = new adrParametersGeo(Node);
						break;
					case "tz":
						tz = new adrParametersTZ(Node);
						break;
					case "label":
						label = new label(Node);
						break;
				}
			}
		}
	}

    /// <summary>
    /// Specifies the language(s) that may be used for contacting the entity associated with the vCard.
	/// See Section 6.4.4 of RFC 6350.
	/// </summary>
	public partial class language
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public language() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public language(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "language-tag":
						languagetag = Node.InnerText;
						break;
				}
			}
		}
	}

    /// <summary>
    /// The ALTID parameter is used to "tag" property instances as being alternative representations of the 
	/// same logical property. See Section 5.4 of RFC 6350
	/// </summary>
	public partial class altid
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public altid() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public altid(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "text":
						text = Node.InnerText;
						break;
				}
			}
		}
	}

    /// <summary>
    /// The PREF parameter is OPTIONAL and is used to indicate that the corresponding instance of a 
	/// property is preferred by the vCard author.Its value MUST be an integer between 1 and 100 that 
	/// quantifies the level of preference.Lower values correspond to a higher level of preference, with 1 
	/// being most preferred.
	/// See Section 5.3 of RFC 6350.
	/// </summary>
	public partial class pref
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public pref() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public pref(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "integer":
						integer = Node.InnerText;
						break;
				}
			}
		}
	}

	/// <summary>
	/// Geographic parameters for the adr class. See Section 6.3.1 of RFC 6350.
	/// </summary>
	public partial class adrParametersGeo
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public adrParametersGeo() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public adrParametersGeo(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "uri":
						uri = Node.InnerText;
						break;
				}
			}
		}
	}

	/// <summary>
	/// Time zone parameter for the adr class. See Section 6.3.1 of RFC 6350.
	/// </summary>
	public partial class adrParametersTZ
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public adrParametersTZ() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public adrParametersTZ(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "text":
						Item = Node.InnerText;
						ItemElementName = AdrParametersItemChoiceEnum.text;
						break;
					case "uri":
						Item = Node.InnerText;
						ItemElementName = AdrParametersItemChoiceEnum.uri;
						break;
				}
			}
		}
	}

	/// <summary>
	/// Label parameter for the adr class. See Section 6.3.1 of RFC 6350.
	/// </summary>
	public partial class label
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public label() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public label(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "text":
						text = Node.InnerText;
						break;
				}
			}
		}
	}

    /// <summary>
    /// Class for specifying the date of marriage, or equivalent, of the object the vCard represents.
	/// See Section 6.2.6 of RFC 6350.
	/// </summary>
	public partial class anniversary
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public anniversary() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public anniversary(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "date":
						Item = Node.InnerText;
						ItemElementName = AnniversaryItemChoiceEnum.date;
						break;
					case "date-time":
						Item = Node.InnerText;
						ItemElementName = AnniversaryItemChoiceEnum.datetime;
						break;
					case "text":
						Item = Node.InnerText;
						ItemElementName = AnniversaryItemChoiceEnum.text;
						break;
					case "time":
						Item = Node.InnerText;
						ItemElementName = AnniversaryItemChoiceEnum.time;						
						break;
					case "value-date-and-or-time":
						Item = Node.InnerText;
						ItemElementName = AnniversaryItemChoiceEnum.valuedateandortime;
						break;
				}
			}
		}
	}

    /// <summary>
    /// Specifies the birth date of the object the vCard represents.
	/// See Section 6.2.5 of RFC 6350.
    /// </summary>
    public partial class bday
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public bday() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public bday(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "date":
						Item = Node.InnerText;
						ItemElementName = BdayItemChoiceEnum.date;
						break;
					case "date-time":
						Item = Node.InnerText;
						ItemElementName = BdayItemChoiceEnum.datetime;
						break;
					case "text":
						Item = Node.InnerText;
						ItemElementName = BdayItemChoiceEnum.text;
						break;
					case "time":
						Item = Node.InnerText;
						ItemElementName = BdayItemChoiceEnum.time;
						break;
					case "value-date-and-or-time":
						// Don't know what to do here.

						break;
				}
			}
		}

	}

    /// <summary>
    /// Specifies the calendar user address [RFC5545] to which a scheduling request[RFC5546] should be 
	/// sent for the object represented by the vCard.
	/// See Section 6.9.2 of RFC 6350.
	/// </summary>
	public partial class caladruri
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public caladruri() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public caladruri(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "parameters":
						parameters = new caladruriParameters(Node);
						break;
					case "uri":
						uri = Node.InnerText;
						break;
				}
			}
		}
	}

	/// <summary>
	/// Parameters for the caladruri class.
	/// </summary>
	public partial class caladruriParameters
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public caladruriParameters() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public caladruriParameters(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "altid":
						altid = new altid(Node);
						break;
					case "pid":
						vcardType.AddStringItem(ref pid, Node.InnerText);
						break;
					case "pref":
						pref = new pref(Node);
						break;
					case "type":
						vcardType.AddTypeText(ref type, Node);
						break;
					case "mediatype":
						mediatype = new mediatype(Node);
						break;
				}
			}
		}
	}

    /// <summary>
    /// Class for the mediatype parameter of various classes.
    /// The MEDIATYPE parameter is used with properties whose value is a URI. Is use is OPTIONAL.
	/// It provides a hint to the vCard consumer application about the media type [RFC2046] of the resource 
	/// identified by the URI.
	/// See Section 5.7 of RFC 6350.
	/// </summary>
	public partial class mediatype
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public mediatype() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public mediatype(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "text":
						text = Node.InnerText;
						break;
				}
			}
		}
	}

    /// <summary>
    /// Specifies the URI for a calendar associated with the object represented by the vCard.
	/// See Section 6.9.3 of RFC 6350.
	/// </summary>
	public partial class caluri
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public caluri() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public caluri(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "parameters":
						parameters = new caluriParameters(Node);
						break;
					case "uri":
						uri = Node.InnerText;
						break;
				}
			}
		}
	}

	/// <summary>
	/// Parameters for the caluri class.
	/// </summary>
	public partial class caluriParameters
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public caluriParameters() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public caluriParameters(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "altid":
						altid = new altid(Node);
						break;
					case "pid":
						vcardType.AddStringItem(ref pid, Node.InnerText);
						break;
					case "pref":
						pref = new pref(Node);
						break;
					case "type":
						vcardType.AddTypeText(ref type, Node);
						break;
					case "mediatype":
						mediatype = new mediatype(Node);
						break;
				}
			}
		}
	}

    /// <summary>
    /// Specifies the application category information about the vCard, also known as "tags".
	/// See Section 6.7.1 of RFC 6350.
	/// </summary>
	public partial class categories
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public categories() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public categories(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "text":
						vcardType.AddStringItem(ref text, Node.InnerText);
						break;
					case "parameters":
						parameters = new categoriesParameters(Node);
						break;
				}
			}
		}
	}

	/// <summary>
	/// Parameters for the categories class.
	/// </summary>
	public partial class categoriesParameters
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public categoriesParameters() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public categoriesParameters(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "altid":
						altid = new altid(Node);
						break;
					case "pid":
						vcardType.AddStringItem(ref pid, Node.InnerText);
						break;
					case "pref":
						pref = new pref(Node);
						break;
					case "type":
						vcardType.AddTypeText(ref type, Node);
						break;
				}
			}
		}
	}

    /// <summary>
    /// Class that gives a global meaning to a local PID source identifier.
	/// See Section 6.7.7 of RFC 6350.
    /// </summary>
    public partial class clientpidmap
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public clientpidmap() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public clientpidmap(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "sourceid":
						sourceid = Node.InnerText;
						break;
					case "uri":
						uri = Node.InnerText;
						break;
				}
			}
		}
	}

    /// <summary>
    /// Specifies the electronic mail address for communication with the object the vCard represents.
	/// See Section 6.4.2 of RFC 6350.
	/// </summary>
	public partial class email
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public email() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public email(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "parameters":
						parameters = new emailParameters(Node);
						break;
					case "text":
						text = Node.InnerText;
						break;
				}
			}
		}
	}

	/// <summary>
	/// Parameters for the email class.
	/// </summary>
	public partial class emailParameters
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public emailParameters() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public emailParameters(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "altid":
						altid = new altid(Node);
						break;
					case "pid":
						vcardType.AddStringItem(ref pid, Node.InnerText);
						break;
					case "pref":
						pref = new pref(Node);
						break;
					case "type":
						vcardType.AddTypeText(ref type, Node);
						break;
				}
			}
		}
	}

    /// <summary>
    /// Specifies the URI for the busy time associated with the object that the vCard represents.
	/// See Section 6.9.1 of RFC 6350.
	/// </summary>
	public partial class fburl
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public fburl() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public fburl(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "parameters":
						parameters = new fburlParameters(Node);
						break;
					case "uri":
						uri = Node.InnerText;
						break;
				}
			}
		}
	}

	/// <summary>
	/// Parameters for the fburl class.
	/// </summary>
	public partial class fburlParameters
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public fburlParameters() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public fburlParameters(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "altid":
						altid = new altid(Node);
						break;
					case "pid":
						vcardType.AddStringItem(ref pid, Node.InnerText);
						break;
					case "pref":
						pref = new pref(Node);
						break;
					case "type":
						vcardType.AddTypeText(ref type, Node);
						break;
					case "mediatype":
						mediatype = new mediatype(Node);
						break;
				}
			}
		}
	}

    /// <summary>
    /// Specifies the formatted text corresponding to the name of the object the vCard represents.
	/// See Section 6.2.1 of RFC 6350.
	/// </summary>
	public partial class fn
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public fn() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public fn(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "parameters":
						parameters = new fnParameters(Node);
						break;
					case "text":
						text = Node.InnerText;
						break;
				}
			}
		}
	}

	/// <summary>
	/// Parameters for the fn class.
	/// </summary>
	public partial class fnParameters
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public fnParameters() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public fnParameters(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "language":
						language = new language(Node);
						break;
					case "altid":
						altid = new altid(Node);
						break;
					case "pid":
						vcardType.AddStringItem(ref pid, Node.InnerText);
						break;
					case "pref":
						pref = new pref(Node);
						break;
					case "type":
						vcardType.AddTypeText(ref type, Node);
						break;
				}
			}
		}
	}

    /// <summary>
    /// Specifies information related to the global positioning of the object the vCard represents.
	/// This class is for the geo element of the vcard.
	/// See Section 6.5.2 of RFC 6350.
	/// </summary>
	public partial class vcardTypeGeo
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public vcardTypeGeo() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public vcardTypeGeo(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "parameters":
						parameters = new vcardTypeGeoParameters(Node);
						break;
					case "uri":
						uri = Node.InnerText;
						break;
				}
			}
		}
	}

	/// <summary>
	/// Parameters for the vcardTypeGeo class.
	/// </summary>
	public partial class vcardTypeGeoParameters
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public vcardTypeGeoParameters() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public vcardTypeGeoParameters(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "altid":
						altid = new altid(Node);
						break;
					case "pid":
						vcardType.AddStringItem(ref pid, Node.InnerText);
						break;
					case "pref":
						pref = new pref(Node);
						break;
					case "type":
						vcardType.AddTypeText(ref type, Node);
						break;
					case "mediatype":
						mediatype = new mediatype(Node);
						break;
				}
			}
		}
	}

    /// <summary>
    /// Specifies the URI for instant messaging and presence protocol communications with the object the 
	/// vCard represents.
	/// See Section 6.4.3 of RFC 6350.
	/// </summary>
	public partial class impp
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public impp() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public impp(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "parameters":
						parameters = new imppParameters(Node);
						break;
					case "uri":
						uri = Node.InnerText;
						break;
				}
			}
		}
	}

	/// <summary>
	/// Parameters for the impp class.
	/// </summary>
	public partial class imppParameters
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public imppParameters() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public imppParameters(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "altid":
						altid = new altid(Node);
						break;
					case "pid":
						vcardType.AddStringItem(ref pid, Node.InnerText);
						break;
					case "pref":
						pref = new pref(Node);
						break;
					case "type":
						vcardType.AddTypeText(ref type, Node);
						break;
					case "mediatype":
						mediatype = new mediatype(Node);
						break;
				}
			}
		}
	}

    /// <summary>
    /// Specifies a public key or authentication certificate associated with the object that the vCard 
	/// represents.
	/// See Section 6.8.1 of RFC 6350.
	/// </summary>
	public partial class key
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public key() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public key(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "text":
						Item = Node.InnerText;
						ItemElementName = KeyItemChoiceEnum.text;
						break;
					case "uri":
						Item = Node.InnerText;
						ItemElementName = KeyItemChoiceEnum.uri;
						break;
					case "parameters":
						parameters = new keyParameters(Node);
						break;
				}
			}
		}
	}

	/// <summary>
	/// Parameters for the key class.
	/// </summary>
	public partial class keyParameters
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public keyParameters() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public keyParameters(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "altid":
						altid = new altid(Node);
						break;
					case "pid":
						vcardType.AddStringItem(ref pid, Node.InnerText);
						break;
					case "pref":
						pref = new pref(Node);
						break;
					case "type":
						vcardType.AddTypeText(ref type, Node);
						break;
					case "mediatype":
						mediatype = new mediatype(Node);
						break;
				}
			}
		}
	}

    /// <summary>
    /// Specifies the kind of object the vCard represents. See Section 6.1.4 of RFC 6350.
    /// </summary>
    public partial class kind
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public kind() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public kind(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "text":
						text = Node.InnerText;
						break;
				}
			}
		}
	}

    /// <summary>
    /// Specifies the language(s) that may be used for contacting the entity associated with the vCard.
	/// See Section 6.4.4 of RFC 6350.
	/// </summary>
	public partial class lang
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public lang() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public lang(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "parameters":
						parameters = new langParameters(Node);
						break;
					case "language-tag":
						languagetag = Node.InnerText;
						break;
				}
			}
		}
	}

	/// <summary>
	/// Parameters for the lang class.
	/// </summary>
	public partial class langParameters
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public langParameters() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public langParameters(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "altid":
						altid = new altid(Node);
						break;
					case "pid":
						vcardType.AddStringItem(ref pid, Node.InnerText);
						break;
					case "pref":
						pref = new pref(Node);
						break;
					case "type":
						vcardType.AddTypeText(ref type, Node);
						break;
				}
			}
		}
	}

    /// <summary>
    /// Specifies a graphic image of a logo associated with the object the vCard represents.
	/// See Section 6.6.3 of RFC 6350.
	/// </summary>
	public partial class logo
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public logo() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public logo(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "parameters":
						parameters = new logoParameters(Node);
						break;
					case "uri":
						uri = Node.InnerText;
						break;
				}
			}
		}
	}

	/// <summary>
	/// Parameters for the logo class.
	/// </summary>
	public partial class logoParameters
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public logoParameters() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public logoParameters(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "language":
						language = new language(Node);
						break;
					case "altid":
						altid = new altid(Node);
						break;
					case "pid":
						vcardType.AddStringItem(ref pid, Node.InnerText);
						break;
					case "pref":
						pref = new pref(Node);
						break;
					case "type":
						vcardType.AddTypeText(ref type, Node);
						break;
					case "mediatype":
						mediatype = new mediatype(Node);
						break;
				}
			}
		}
	}

    /// <summary>
    /// Class for including a member in the group this vCard represents. See Section 6.6.5 of RFC 6350.
    /// </summary>
    public partial class member
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public member() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public member(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "parameters":
						parameters = new memberParameters(Node);
						break;
					case "uri":
						uri = Node.InnerText;
						break;
				}
			}
		}
	}

	/// <summary>
	/// Parameters for the member class.
	/// </summary>
	public partial class memberParameters
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public memberParameters() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public memberParameters(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "altid":
						altid = new altid(Node);
						break;
					case "pid":
						vcardType.AddStringItem(ref pid, Node.InnerText);
						break;
					case "pref":
						pref = new pref(Node);
						break;
					case "mediatype":
						mediatype = new mediatype(Node);
						break;
				}
			}
		}
	}

    /// <summary>
    /// Specifies the components of the name of the object the vCard represents.
	/// See Section 6.2.2 of RFC 6350.
	/// </summary>
	public partial class n
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public n() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public n(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "parameters":
						parameters = new nParameters(Node);
						break;
					case "surname":
						vcardType.AddStringItem(ref surname, Node.InnerText);
						break;
					case "given":
						vcardType.AddStringItem(ref given, Node.InnerText);
						break;
					case "additional":
						vcardType.AddStringItem(ref additional, Node.InnerText);
						break;
					case "prefix":
						vcardType.AddStringItem(ref prefix, Node.InnerText);
						break;
					case "suffix":
						vcardType.AddStringItem(ref suffix, Node.InnerText);
						break;
				}
			}
		}

		/// <summary>
		/// Gets or sets the first LastName (surname) field.
		/// </summary>
		[XmlIgnore]
		public string LastName
		{
			get { return surname?[0]; }
			set { vcardType.SetFirstStringItem(ref surname, value); }
		}

		/// <summary>
		/// Gets or sets the first FirstName (given name) field.
		/// </summary>
		[XmlIgnore]
		public string FirstName
		{
			get { return given?[0]; }
			set {  vcardType.SetFirstStringItem(ref given, value); }
		}

		/// <summary>
		/// Gets or sets the first MiddleName (additional) field.
		/// </summary>
        [XmlIgnore]
        public string MiddleName
		{
			get { return additional?[0]; }
			set { vcardType.SetFirstStringItem(ref additional, value); }
		}

		/// <summary>
		/// Gets or sets the first prefix field.
		/// </summary>
        [XmlIgnore]
        public string Prefix
		{
			get { return prefix?[0]; }
			set { vcardType.SetFirstStringItem(ref prefix, value); }
		}

		/// <summary>
		/// Gets or sets the first suffix field.
		/// </summary>
        [XmlIgnore]
        public string Suffix
		{
			get { return suffix?[0]; }
			set { vcardType.SetFirstStringItem(ref suffix, value); }
		}
	}

	/// <summary>
	/// Parameters for the n class.
	/// </summary>
	public partial class nParameters
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public nParameters() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public nParameters(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "language":
						language = new language(Node);
						break;
					case "sort-as":
						vcardType.AddStringItem(ref sortas, Node.InnerText);
						break;
					case "altid":
						altid = new altid(Node);
						break;
				}
			}
		}
	}

    /// <summary>
    /// Specifies the text corresponding to the nickname of the object the vCard represents.
	/// See Section 6.2.3 of RFC 6350.
	/// </summary>
	public partial class nickname
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public nickname() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public nickname(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "parameters":
						parameters = new nicknameParameters(Node);
						break;
					case "text":
						vcardType.AddStringItem(ref text, Node.InnerText);
						break;
				}
			}
		}
	}

	/// <summary>
	/// Parameters for the nickname class.
	/// </summary>
	public partial class nicknameParameters
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public nicknameParameters() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public nicknameParameters(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "language":
						language = new language(Node);
						break;
					case "altid":
						altid = new altid(Node);
						break;
					case "pid":
						vcardType.AddStringItem(ref pid, Node.InnerText);
						break;
					case "pref":
						pref = new pref(Node);
						break;
					case "type":
						vcardType.AddTypeText(ref type, Node);
						break;
				}
			}
		}
	}

    /// <summary>
    /// Specifies supplemental information or a comment that is associated with the vCard.
	/// See Section 6.7.2 of RFC 6350.
	/// </summary>
	public partial class note
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public note() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public note(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "parameters":
						parameters = new noteParameters(Node);
						break;
					case "text":
						text = Node.InnerText;
						break;
				}
			}
		}
	}

	/// <summary>
	/// Parameters for the note class.
	/// </summary>
	public partial class noteParameters
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public noteParameters() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public noteParameters(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "language":
						language = new language(Node);
						break;
					case "altid":
						altid = new altid(Node);
						break;
					case "pid":
						vcardType.AddStringItem(ref pid, Node.InnerText);
						break;
					case "pref":
						pref = new pref(Node);
						break;
					case "type":
						vcardType.AddTypeText(ref type, Node);
						break;
				}
			}
		}
	}

    /// <summary>
    /// Specifies the organizational name and units associated with the vCard.
	/// See Section 6.6.4 of RFC 6350.
	/// </summary>
	public partial class org
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public org() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public org(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "parameters":
						parameters = new orgParameters(Node);
						break;
					case "text":
						vcardType.AddStringItem(ref text, Node.InnerText);
						break;
				}
			}
		}
	}

	/// <summary>
	/// Parameters for the org class.
	/// </summary>
	public partial class orgParameters
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public orgParameters() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public orgParameters(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "language":
						language = new language(Node);
						break;
					case "altid":
						altid = new altid(Node);
						break;
					case "pid":
						vcardType.AddStringItem(ref pid, Node.InnerText);
						break;
					case "pref":
						pref = new pref(Node);
						break;
					case "type":
						vcardType.AddTypeText(ref type, Node);
						break;
					case "sort-as":
						vcardType.AddStringItem(ref sortas, Node.InnerText);
						break;
				}
			}
		}
	}

    /// <summary>
    /// Specifies an image or photograph information that annotates some aspect of the object the vCard 
	/// represents.
	/// See Section 6.2.4 of RFC 6350.
	/// </summary>
	public partial class photo
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public photo() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public photo(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "parameters":
						parameters = new photoParameters(Node);
						break;
					case "uri":
						uri = Node.InnerText;
						break;
				}
			}
		}
	}

	/// <summary>
	/// Parameters for the photo class.
	/// </summary>
	public partial class photoParameters
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public photoParameters() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public photoParameters(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "altid":
						altid = new altid(Node);
						break;
					case "pid":
						vcardType.AddStringItem(ref pid, Node.InnerText);
						break;
					case "pref":
						pref = new pref(Node);
						break;
					case "type":
						vcardType.AddTypeText(ref type, Node);
						break;
					case "mediatype":
						mediatype = new mediatype(Node);
						break;
				}
			}
		}
	}

    /// <summary>
    /// Specifies the identifier for the product that created the vCard object.
	/// See Section 6.7.3 of RFC 6350.
	/// </summary>
	public partial class prodid
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public prodid() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public prodid(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "text":
						text = Node.InnerText;
						break;
				}
			}
		}
	}

    /// <summary>
    /// Specifies a relationship between another entity and the entity represented by this vCard.
	/// See Section 6.6.6 of RFC 6350.
	/// </summary>
	public partial class related
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public related() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public related(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "text":
						Item = Node.InnerText;
						ItemElementName = RelatedParametersItemChoiceEnum.text;
						break;
					case "uri":
						Item = Node.InnerText;
						ItemElementName = RelatedParametersItemChoiceEnum.uri;
						break;
					case "parameters":
						parameters = new relatedParameters(Node);
						break;
				}

			}
		}
	}

	/// <summary>
	/// Parameters for the related class.
	/// </summary>
	public partial class relatedParameters
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public relatedParameters() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public relatedParameters(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "altid":
						altid = new altid(Node);
						break;
					case "pid":
						vcardType.AddStringItem(ref pid, Node.InnerText);
						break;
					case "pref":
						pref = new pref(Node);
						break;
					case "type":
						AddRelatedParametersText(Node);			
						break;
					case "mediatype":
						mediatype = new mediatype(Node);
						break;
				}
			}
		}

		private void AddRelatedParametersText(XmlNode Node)
		{
			foreach (XmlNode Child in Node.ChildNodes)
			{
				if (Child.LocalName == "text")
				{
					relatedParametersText Rpt = RelatedTextToEnum(Child.InnerText);
					if (type == null)
					{
						type = new relatedParametersText[1];
						type[0] = Rpt;
					}
					else
					{
						relatedParametersText[] NewArray = new relatedParametersText[
							type.Length + 1];
						Array.Copy(type, NewArray, type.Length);
						NewArray[type.Length] = Rpt;
						type = NewArray;
					}
				}
			} // end foreach
		}

		private relatedParametersText RelatedTextToEnum(String str)
		{
			relatedParametersText RetVal = relatedParametersText.work;
			switch (str)
			{
				case "work":
					RetVal = relatedParametersText.work;
					break;
		        case "home":
					RetVal = relatedParametersText.home;
					break;
				case "contact":
					RetVal = relatedParametersText.contact;
					break;
				case "acquaintance":
					RetVal = relatedParametersText.acquaintance;
					break;
				case "friend":
					RetVal = relatedParametersText.friend;
					break;
				case "met":
					RetVal = relatedParametersText.met;
					break;
				case "co-worker":
					RetVal = relatedParametersText.coworker;
					break;
				case "colleague":
					RetVal = relatedParametersText.colleague;
					break;
				case "co-resident":
					RetVal = relatedParametersText.coresident;
					break;
				case "neighbor":
					RetVal = relatedParametersText.neighbor;
					break;
				case "child":
					RetVal = relatedParametersText.child;
					break;
				case "parent":
					RetVal = relatedParametersText.parent;
					break;
				case "sibling":
					RetVal = relatedParametersText.sibling;
					break;
				case "spouse":
					RetVal = relatedParametersText.spouse;
					break;
				case "kin":
					RetVal = relatedParametersText.kin;
					break;
				case "muse":
					RetVal = relatedParametersText.muse;
					break;
				case "crush":
					RetVal = relatedParametersText.crush;
					break;
				case "date":
					RetVal = relatedParametersText.date;
					break;
				case "sweetheart":
					RetVal = relatedParametersText.sweetheart;
					break;
				case "me":
					RetVal = relatedParametersText.me;
					break;
				case "agent":
					RetVal = relatedParametersText.agent;
					break;
				case "emergency":
					RetVal = relatedParametersText.emergency;
					break;
			} // end switch

			return RetVal;
		}
	}

	/// <summary>
	/// Specifies a timestamp. See Section 4.3.5 of RFC 6350.
	/// </summary>
	public partial class valuetimestamp
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public valuetimestamp() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public valuetimestamp(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "timestamp":
						timestamp = Node.InnerText;
						break;
				}
			}
		}
	}

    /// <summary>
    /// Specifies the function or part played in a particular situation by the object the vCard represents.
	/// See Section 6.6.2 of RFC 6350.
	/// </summary>
	public partial class role
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public role() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public role(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "text":
						text = Node.InnerText;
						break;
					case "parameters":
						parameters = new roleParameters(Node);
						break;
				}
			}
		}
	}

	/// <summary>
	/// Parameters for the role class.
	/// </summary>
	public partial class roleParameters
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public roleParameters() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public roleParameters(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "language":
						language = new language(Node);
						break;
					case "altid":
						altid = new altid(Node);
						break;
					case "pid":
						vcardType.AddStringItem(ref pid, Node.InnerText);
						break;
					case "pref":
						pref = new pref(Node);
						break;
					case "type":
						vcardType.AddTypeText(ref type, Node);
						break;
				}
			}
		}
	}

    /// <summary>
    /// Specifies the components of the sex and gender identity of the object the vCard represents.
	/// See Section 6.2.7 of RFC 6350.
	/// </summary>
	public partial class gender
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public gender() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public gender(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "sex":
						sex = SexStringToEnum(Node.InnerText);
						break;
					case "identity":
						identity = Node.InnerText;
						break;
				}
			}
		}

		private sex SexStringToEnum(String str)
		{
			sex RetVal = AdditionalData.sex.U;

			switch (str)
			{
				case "M":
					RetVal = AdditionalData.sex.M;
					break;
				case "F":
					RetVal = AdditionalData.sex.F;
					break;
				case "O":
					RetVal = AdditionalData.sex.O;
					break;
				case "N":
					RetVal = AdditionalData.sex.N;
					break;
				case "U":
					RetVal = AdditionalData.sex.U;
					break;
			}

			return RetVal;
		}
	}

    /// <summary>
    /// Specifies a digital sound content information that annotates some aspect of the vCard.This property 
	/// is often used to specify the proper pronunciation of the name property value of the vCard.
	/// See Section 6.7.5 of RFC 6350.
	/// </summary>
	public partial class sound
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public sound() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public sound(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "uri":
						uri = Node.InnerText;
						break;
					case "parameters":
						parameters = new soundParameters(Node);
						break;
				}
			}
		}
	}

	/// <summary>
	/// Parameters for the sound class.
	/// </summary>
	public partial class soundParameters
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public soundParameters() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public soundParameters(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "language":
						language = new language(Node);
						break;
					case "altid":
						altid = new altid(Node);
						break;
					case "pid":
						vcardType.AddStringItem(ref pid, Node.InnerText);
						break;
					case "pref":
						pref = new pref(Node);
						break;
					case "type":
						vcardType.AddTypeText(ref type, Node);
						break;
					case "mediatype":
						mediatype = new mediatype(Node);
						break;
				}
			}
		}
    }

    /// <summary>
    /// Class for the SOURCE property. The SOURCE property is used to provide the means by which 
    /// applications knowledgable in the given directory service protocol can obtain additional or 
    /// more up-to-date information from the directory service.
    /// See Section 6.1.3 of RFC 6350.
    /// </summary>
	public partial class source
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public source() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public source(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "uri":
						uri = Node.InnerText;
						break;
					case "parameters":
						parameters = new sourceParameters(Node);
						break;
				}
			}
		}
	}

	/// <summary>
	/// Parameters for the source class.
	/// </summary>
	public partial class sourceParameters
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public sourceParameters() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public sourceParameters(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "altid":
						altid = new altid(Node);
						break;
					case "pid":
						vcardType.AddStringItem(ref pid, Node.InnerText);
						break;
					case "pref":
						pref = new pref(Node);
						break;
					case "mediatype":
						mediatype = new mediatype(Node);
						break;
				}
			}
		}
	}

    /// <summary>
    /// Specifies the telephone number for telephony communication with the object the vCard represents.
	/// See Section 6.4.1 of RFC 6350.
	/// </summary>
	public partial class tel
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public tel() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public tel(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "text":
						Item = Node.InnerText;
						ItemElementName = TelItemChoiceEnum.text;
						break;
					case "uri":
						Item = Node.InnerText;
						ItemElementName = TelItemChoiceEnum.uri;
						break;
					case "parameters":
						parameters = new telParameters(Node);
						break;
				}
			}
		}
	}

	/// <summary>
	/// Parameters for the tel class.
	/// </summary>
	public partial class telParameters
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public telParameters() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public telParameters(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "altid":
						altid = new altid(Node);
						break;
					case "pid":
						vcardType.AddStringItem(ref pid, Node.InnerText);
						break;
					case "pref":
						pref = new pref(Node);
						break;
					case "type":
						Addtype(Node);
						break;
					case "mediatype":
						mediatype = new mediatype(Node);
						break;
				}
			}
		}

		private void Addtype(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "text":
						AddTelTypeText(Node.InnerText);
						break;
				}
			}
		}

		// 3 May 16 PHR
		/// <summary>
		/// 
		/// </summary>
		/// <param name="str"></param>
		private void AddTelTypeText(String str)
		{
			if (type == null)
			{
				type = new String[1];
				type[0] = str;
			}
			else
			{
				String[] NewArray = new String[type.Length + 1];
				Array.Copy(type, NewArray, type.Length);
				NewArray[type.Length] = str;
				type = NewArray;
			}
		}
	}

    /// <summary>
    /// Specifies the position or job of the object the vCard represents.
	/// See Section 6.6.1 of RFC 6350.
	/// </summary>
	public partial class title
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public title() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public title(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "text":
						text = Node.InnerText;
						break;
					case "parameters":
						parameters = new titleParameters(Node);
						break;
				}
			}
		}
	}

	/// <summary>
	/// Parameters for the title class.
	/// </summary>
	public partial class titleParameters
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public titleParameters() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public titleParameters(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "language":
						language = new language(Node);
						break;
					case "altid":
						altid = new altid(Node);
						break;
					case "pid":
						vcardType.AddStringItem(ref pid, Node.InnerText);
						break;
					case "pref":
						pref = new pref(Node);
						break;
					case "type":
						vcardType.AddTypeText(ref type, Node);
						break;
				}
			}
		}
	}

    /// <summary>
    /// Specifies information related to the time zone of the object the vCard represents.
	/// This class is used for the tz property of the vcardType class.
	/// See Section 6.5.1 of RFC 5350.
	/// </summary>
	public partial class vcardTypeTZ
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public vcardTypeTZ() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public vcardTypeTZ(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "text":
						Item = Node.InnerText;
						ItemElementName = VcardTypeTzItemChoiceEnum.text;
						break;
					case "uri":
						Item = Node.InnerText;
						ItemElementName = VcardTypeTzItemChoiceEnum.uri;
						break;
					case "utc-offset":
						Item = Node.InnerText;
						ItemElementName = VcardTypeTzItemChoiceEnum.utcoffset;
						break;
					case "parameters":
						parameters = new vcardTypeTZParameters(Node);
						break;
				}
			}
		}
	}

	/// <summary>
	/// Parameters for the vcardTypeTZ class.
	/// </summary>
	public partial class vcardTypeTZParameters
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public vcardTypeTZParameters() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public vcardTypeTZParameters(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "altid":
						altid = new altid(Node);
						break;
					case "pid":
						vcardType.AddStringItem(ref pid, Node.InnerText);
						break;
					case "pref":
						pref = new pref(Node);
						break;
					case "mediatype":
						mediatype = new mediatype(Node);
						break;
				}
			}
		}
	}

    /// <summary>
    /// Specifies a value that represents a globally unique identifier corresponding to the entity 
	/// associated with the vCard.
	/// See Section 6.7.6 of RFC 6350.
	/// </summary>
	public partial class uid
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public uid()
		{
            // Free-form text MAY also be used. 
            uri = Guid.NewGuid().ToString().Replace("-", "");
		}

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public uid(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "uri":
						uri = Node.InnerText;
						break;
				}
			}
		}
	}

    /// <summary>
    /// Specifies a uniform resource locator associated with the object to which the vCard refers.Examples 
	/// for individuals include personal web sites, blogs, and social networking site identifiers.
	/// See Section 6.7.8 of RFC 6350.
	/// </summary>
	public partial class url
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public url() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public url(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "uri":
						uri = Node.InnerText;
						break;
					case "parameters":
						parameters = new urlParameters(Node);
						break;
				}
			}
		}
	}

	/// <summary>
	/// Parameters for the url class.
	/// </summary>
	public partial class urlParameters
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public urlParameters() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public urlParameters(XmlNode Root)
		{
			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "altid":
						altid = new altid(Node);
						break;
					case "pid":
						vcardType.AddStringItem(ref pid, Node.InnerText);
						break;
					case "pref":
						pref = new pref(Node);
						break;
					case "type":
						vcardType.AddTypeText(ref type, Node);
						break;
					case "mediatype":
						mediatype = new mediatype(Node);
						break;
				}
			}
		}
	}

	/// <summary>
	/// Class for grouping together related properties. See Section 3.3 of RFC 6350 and Section 5
	/// of RFC 6351 for an explanation of property grouping.
	/// </summary>
	public partial class group
	{
		/// <summary>
		/// Default constructor. Used for de-serialization using XmlSerializer or 
		/// to create a new object of this type.
		/// </summary>
		public group() { }

        /// <summary>
        /// Constructor used when programmatically parsing a XML document.
        /// </summary>
        /// <param name="Root">Root node containing the XML for this type</param>
        public group(XmlNode Root)
		{
			if (Root.Attributes["name"] != null)
				name = Root.Attributes["name"].Value;

			foreach (XmlNode Node in Root.ChildNodes)
			{
				switch (Node.LocalName)
				{
					case "adr":
						adr = (adr[]) vcardType.AddObjToObjArray(adr, new adr(Node), typeof(adr));
						break;
					case "anniversary":
						anniversary = new anniversary(Node);
						break;
					case "bday":
						bday = new bday(Node);
						break;
					case "caladruri":
						caladruri = (caladruri[])vcardType.AddObjToObjArray(
							caladruri,	new caladruri(Node), typeof(caladruri));
						break;
					case "caluri":
						caluri = (caluri[])vcardType.AddObjToObjArray(caluri,
							new caluri(Node), typeof(caluri));
						break;
					case "categories":
						categories = (categories[])vcardType.AddObjToObjArray(
							categories, new categories(Node), typeof(categories));
						break;
					case "clientpidmap":
						clientpidmap = (clientpidmap[])vcardType.AddObjToObjArray(
							clientpidmap, new clientpidmap(Node),
							typeof(clientpidmap));
						break;
					case "email":
						email = (email[])vcardType.AddObjToObjArray(email, 
							new email(Node), typeof(email));
						break;
					case "fburl":
						fburl = (fburl[])vcardType.AddObjToObjArray(fburl, 
							new fburl(Node), typeof(fburl));
						break;
					case "fn":
						fn = (fn[])vcardType.AddObjToObjArray(fn, new 
							fn(Node), typeof(fn));
						break;
					case "geo":
						geo = (vcardTypeGeo[])vcardType.AddObjToObjArray(geo,
							new vcardTypeGeo(Node), typeof(vcardTypeGeo));
						break;
					case "impp":
						impp = (impp[])vcardType.AddObjToObjArray(impp, new 
							impp(Node), typeof(impp));
						break;
					case "key":
						key = (key[])vcardType.AddObjToObjArray(key, new 
							key(Node), typeof(key));
						break;
					case "kind":
						kind = new kind(Node);
						break;
					case "lang":
						lang = (lang[])vcardType.AddObjToObjArray(lang, new
							lang(Node), typeof(lang));
						break;
					case "logo":
						logo = (logo[])vcardType.AddObjToObjArray(logo, new
							logo(Node), typeof(logo));
						break;
					case "member":
						member = (member[])vcardType.AddObjToObjArray(member,
							new	member(Node), typeof(member));
						break;
					case "n":
						n = new n(Node);
						break;
					case "nickname":
						nickname = (nickname[])vcardType.AddObjToObjArray(
							nickname, new nickname(Node), typeof(nickname));
						break;
					case "note":
						note = (note[])vcardType.AddObjToObjArray(note, new 
							note(Node), typeof(note));
						break;
					case "org":
						org = (org[])vcardType.AddObjToObjArray(org, new 
							org(Node), typeof(org));
						break;
					case "photo":
						photo = (photo[])vcardType.AddObjToObjArray(photo, 
							new	photo(Node), typeof(photo));
						break;
					case "prodid":
						prodid = new prodid(Node);
						break;
					case "related":
						related = (related[])vcardType.AddObjToObjArray(
							related, new related(Node), typeof(related));
						break;
					case "rev":
						rev = new valuetimestamp(Node);
						break;
					case "role":
						role = (role[])vcardType.AddObjToObjArray(role, new
							role(Node), typeof(role));
						break;
					case "gender":
						gender = new gender(Node);
						break;
					case "sound":
						sound = (sound[])vcardType.AddObjToObjArray(sound, 
							new sound(Node), typeof(sound));
						break;
					case "source":
						source = (source[])vcardType.AddObjToObjArray(source,
							new source(Node), typeof(source));
						break;
					case "tel":
						tel = (tel[])vcardType.AddObjToObjArray(tel, new 
							tel(Node), typeof(tel));
						break;
					case "title":
						title = (title[])vcardType.AddObjToObjArray(title,
							new title(Node), typeof(title));
						break;
					case "tz":
						tz = (vcardTypeTZ[])vcardType.AddObjToObjArray(tz,
							new vcardTypeTZ(Node), typeof(vcardTypeTZ));
						break;
					case "uid":
						uid = new uid(Node);
						break;
					case "url":
						url = (url[])vcardType.AddObjToObjArray(url, new 
							url(Node), typeof(url));
						break;
				} // end switch
			}
		}
	}
}
