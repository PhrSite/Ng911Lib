/////////////////////////////////////////////////////////////////////////////////////
//  File: Lost.cs                                                   10 Dec 22 PHR
/////////////////////////////////////////////////////////////////////////////////////

using System.Xml.Serialization;
using Pidf;

namespace Lost
{
    /// <summary>
    /// Class for handling the findService request. See RFC 5222.
    /// </summary>
    [Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [XmlType(Namespace = "urn:ietf:params:xml:ns:lost1")]
    [XmlRootAttribute("findService", Namespace = "urn:ietf:params:xml:ns:lost1", IsNullable = false)]
    public class FindService
    {
        /// <summary>
        /// Default constructor
        /// </summary>
        public FindService()
        {
        }

        /// <summary>
        /// Set to "value" to request the service boundary in the response by value. Set to 
        /// "reference" to request the service boundary by-reference. If absent then no service boundary 
        /// is requested.
        /// </summary>
        [XmlAttribute("serviceBoundary")]
        public string serviceBoundary = "reference";

        /// <summary>
        /// If true, then the LoST server will perform recursive requests.
        /// </summary>
        [XmlAttribute("recursive")]
        public bool recursive = false;

        /// <summary>
        /// Set to true to request that the LoST server perform validation of a civic address. Applies 
        /// only to civic addresses.
        /// </summary>
        [XmlAttribute("validateLocation")]
        public bool validateLocation = false;

        /// <summary>
        /// Contains the location information corresponding to the locInfoType schema defined in 
        /// Section 2.2.5 of RFC 4119.
        /// </summary>
        [XmlElement("location")]
        public locInfoType location = null;

        /// <summary>
        /// Specifies the service to provide. For example "urn:service:sos".
        /// The list should only contain one service.
        /// </summary>
        [XmlElement("service")]
        public List<string> service = new List<string>();
    }

    /// <summary>
    /// Class for handling the findServiceResponse response to a findService
    /// request.
    /// </summary>
    [Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [XmlType(Namespace = "urn:ietf:params:xml:ns:lost1")]
    [XmlRoot("findServiceResponse", Namespace = "urn:ietf:params:xml:ns:lost1", IsNullable = false)]
    public class FindServiceResponse
    {
        /// <summary>
        /// Default constructor
        /// </summary>
        public FindServiceResponse()
        {
        }

        /// <summary>
        /// This array contains the URI and other information about each service provider that was found.
        /// </summary>
        [XmlElement("mapping")]
        public List<Mapping> mapping = new List<Mapping>();

        /// <summary>
        /// Contains information about each LoST server that was in the request path if recursion occurred.
        /// </summary>
        [XmlElement("path")]
        public LostPath path = null;

        /// <summary>
        /// Identifies which location was used to find the  service provider.
        /// </summary>
        [XmlElement("locationUsed")]
        public LocationUsed locationUsed = null;

        /// <summary>
        /// Contains any warnings that may have been generated by the LoST server.
        /// </summary>
        [XmlElement("warnings")]
        public LostWarnings warnings = null;
    }

    /// <summary>
    /// Contains information about a service provider.
    /// </summary>
    [Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [XmlType(Namespace = "urn:ietf:params:xml:ns:lost1")]
    [XmlRoot("mapping", Namespace = "urn:ietf:params:xml:ns:lost1", IsNullable = false)]
    public class Mapping
    {
        /// <summary>
        /// Default constructor
        /// </summary>
        public Mapping() { }

        /// <summary>
        /// Date and time that the mapping expires (i.e. becomes invalid). The format is ISO 8601 UTC time. 
        /// Or it may contain values of "NO-CACHE" or "NO-EXPIRATION".
        /// </summary>
        [XmlAttribute("expires")]
        public string expires = null;

        /// <summary>
        /// Date and time that this data was last updated. The format is ISO 8601 UTC time. This in 
        /// combination with the source and sourceId attributes uniquely identifies the mapping. 
        /// This is a required attribute.
        /// </summary>
        [XmlAttribute("lastUpdated")]
        public string lastUpdated = null;

        /// <summary>
        /// Contains a LoST application unique string identifying the authoritative generator of the 
        /// mapping. See Section 5.1 of RFC 5222.
        /// This is a required attribute.
        /// </summary>
        [XmlAttribute("source")]
        public string source = null;

        /// <summary>
        /// UUID that uniquely identifies the mapping. See Section 5.1 of RFC 5222.
        /// This attribute is required.
        /// </summary>
        [XmlAttribute("sourceId")]
        public string sourceId = null;

        /// <summary>
        /// Contains a human readable display of a description of the service.
        /// This element is optional.
        /// </summary>
        [XmlElement("displayName")]
        public List<DisplayName> displayName = null;

        /// <summary>
        /// Contains the URN of the service that was requested. See Section 5.4 of
        /// RFC 5222.
        /// </summary>
        [XmlElement]
        public string service = null;

        /// <summary>
        /// Contains the service boundary values. Optional. see Section 5.5 of
        /// RFC 5222.
        /// </summary>
        [XmlElement("serviceBoundary")]
        public List<locInfoType> serviceBoundary = null;
        
        /// <summary>
        /// Contains a reference to the service boundary. 
        /// </summary>
        [XmlElement("serviceBoundaryReference")]
        public ServiceBoundaryReference serviceBoundaryReference = null;

        /// <summary>
        /// Contains the service URLs. See Section 5.8 of RFC 5222.
        /// </summary>
        [XmlElement("uri")]
        public List<string> uri = null;

        /// <summary>
        /// See Section 5.7 of RFC 5222.
        /// </summary>
        [XmlElement("serviceNumber")]
        public string serviceNumber = null;
    }

    /// <summary>
    /// Class for handling information about a service boundary reference.
    /// </summary>
    [Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [XmlType(Namespace = "urn:ietf:params:xml:ns:lost1")]
    [XmlRootAttribute("mapping", Namespace = "urn:ietf:params:xml:ns:lost1", IsNullable = false)]
    public class ServiceBoundaryReference
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public ServiceBoundaryReference() { }

        /// <summary>
        /// Source of the service boundary.
        /// </summary>
        [XmlAttribute("source")]
        public string source = null;
        /// <summary>
        /// Unique key that can be used to query for the service boundary value.
        /// </summary>
        [XmlAttribute("key")]
        public string key = null;
    }

    /// <summary>
    /// Class that contains information about a display name that describes
    /// a service.
    /// </summary>
    public class DisplayName
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public DisplayName() { }
        /// <summary>
        /// ID of the service.
        /// </summary>
        [XmlAttribute("id")]
        public string id { get; set; }
        /// <summary>
        /// Language attribute.
        /// </summary>
        [XmlAttribute("xml:lang")]
        public string lang = "en";

        /// <summary>
        /// Human readable description of the service.
        /// </summary>
        [XmlText]
        public string Value { get; set; }
    }

    /// <summary>
    /// Class for handling the path element.
    /// </summary>
    public class LostPath
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public LostPath() { }

        /// <summary>
        /// Contains one or more vias for the LoST servers in the request path.
        /// </summary>
        [XmlElement("via")]
        public List<PathVia> Via = new List<PathVia>();
    }

    /// <summary>
    /// Class for handling a via element of a path element.
    /// </summary>
    public class PathVia
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public PathVia() { }

        /// <summary>
        /// Source of the server.
        /// </summary>
        [XmlAttribute("source")]
        public string source = null;
    }

    /// <summary>
    /// Class for a locationUsed element.
    /// </summary>
    public class LocationUsed
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public LocationUsed() {  }
        /// <summary>
        /// ID of the location that was used.
        /// </summary>
        [XmlAttribute("id")]
        public string id = null;
    }

    /// <summary>
    /// Class for the listServices LoST request.
    /// </summary>
    [Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [XmlType(Namespace = "urn:ietf:params:xml:ns:lost1")]
    [XmlRoot("listServices", Namespace = "urn:ietf:params:xml:ns:lost1", IsNullable = false)]
    public class ListServices
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public ListServices() { }
        /// <summary>
        /// URN of the root service. For example "urn:service:sos".
        /// </summary>
        [XmlElement("service")]
        public string service = null;
    }

    /// <summary>
    /// Class for the listServicesResponse response from a LoST server.
    /// </summary>
    [Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [XmlType(Namespace = "urn:ietf:params:xml:ns:lost1")]
    [XmlRoot("listServicesResponse", Namespace = "urn:ietf:params:xml:ns:lost1", IsNullable = false)]
    public class ListServicesResponse
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public ListServicesResponse() { }

        /// <summary>
        /// Contains a list of available services.
        /// </summary>
        [XmlElement("serviceList")]
        public List<string> serviceList = new List<string>();

        /// <summary>
        /// Path elements of the servers in the request path.
        /// </summary>
        [XmlElement("path")]
        public List<LostPath> path = null;

        /// <summary>
        /// Contains warnings.
        /// </summary>
        [XmlElement("warnings")]
        public LostWarnings warnings = null;
    }

    /// <summary>
    /// Class for the listServicesByLocation LoST request.
    /// </summary>
    [Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [XmlType(Namespace = "urn:ietf:params:xml:ns:lost1")]
    [XmlRoot("listServicesByLocation", Namespace = "urn:ietf:params:xml:ns:lost1", IsNullable = false)]
    public class ListServicesByLocation
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public ListServicesByLocation() { }
        /// <summary>
        /// If true, then perform recursive requests.
        /// </summary>
        [XmlAttribute("recursive")]
        public bool recursive = false;

        /// <summary>
        /// Contains the location information corresponding to the locInfoType schema defined in Section 
        /// 2.2.5 of RFC 4119.
        /// </summary>
        [XmlElement("location")]
        public locInfoType location = null;

        /// <summary>
        /// URN of the service. For example "urn:service:sos".
        /// </summary>
        [XmlElement("service")]
        public string service = null;
    }

    /// <summary>
    /// Class for the listServicesByLocationResponse response.
    /// </summary>
    [Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [XmlType(Namespace = "urn:ietf:params:xml:ns:lost1")]
    [XmlRoot("listServicesByLocationResponse", Namespace = "urn:ietf:params:xml:ns:lost1", 
        IsNullable = false)]
    public class ListServicesByLocationResponse
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public ListServicesByLocationResponse() { }
        /// <summary>
        /// List of available services.
        /// </summary>
        [XmlElement("serviceList")]
        public List<string> serviceList = new List<string>();
        /// <summary>
        /// Request path that was used.
        /// </summary>
        [XmlElement("path")]
        public List<LostPath> path = null;
        /// <summary>
        /// Describes the location that was used.
        /// </summary>
        [XmlElement("locationUsed")]
        public LocationUsed locationUsed = null;
        /// <summary>
        /// Contains warnings if any were generated.
        /// </summary>
        [XmlElement("warnings")]
        public LostWarnings warnings = null;
    }

    /// <summary>
    /// Class for the getServiceBoundary LoST request.
    /// </summary>
    [Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [XmlType(Namespace = "urn:ietf:params:xml:ns:lost1")]
    [XmlRoot("getServiceBoundary", Namespace = "urn:ietf:params:xml:ns:lost1", IsNullable = false)]
    public class GetServiceBoundary
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public GetServiceBoundary() { }
        /// <summary>
        /// Key that identifies the service boundary to get.
        /// </summary>
        [XmlAttribute("key")]
        public string key = null;
    }

    /// <summary>
    /// Class for the LoST getServiceBoundaryResponse
    /// </summary>
    [Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [XmlType(Namespace = "urn:ietf:params:xml:ns:lost1")]
    [XmlRoot("getServiceBoundaryResponse", Namespace = "urn:ietf:params:xml:ns:lost1", 
        IsNullable = false)]
    public class GetServiceBoundaryResponse
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public GetServiceBoundaryResponse() { }

        /// <summary>
        /// Contains the service boundary corresponding to the locInfoType
        /// schema defined in Section 2.2.5 of RFC 4119.
        /// </summary>
        [XmlElement("serviceBoundary")]
        public locInfoType serviceBoundary = null;

        /// <summary>
        /// Request path that was followed.
        /// </summary>
        [XmlElement("path")]
        public List<LostPath> path = null;

        /// <summary>
        /// Contains any warnings that may have occurred.
        /// </summary>
        [XmlElement("warnings")]
        public LostWarnings warnings = null;
    }

    /// <summary>
    /// Class for handling an error response from the LoST server. See Section 13.1 of RFC 5222.
    /// </summary>
    [Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [XmlType(Namespace = "urn:ietf:params:xml:ns:lost1")]
    [XmlRootAttribute("errors", Namespace = "urn:ietf:params:xml:ns:lost1", IsNullable = false)]
    public class LostErrors
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public LostErrors() { }

        /// <summary>
        /// Source of the error.
        /// </summary>
        [XmlAttribute("source")]
        public string source = null;

        /// <summary>
        /// Bad request
        /// </summary>
        [XmlElement("badRequest")]
        public LostMsgBase badRequest = null;

        /// <summary>
        /// Forbidden request
        /// </summary>
        [XmlElement("forbidden")]
        public LostMsgBase forbidden = null;

        /// <summary>
        /// An internal error occurred in the LoST server
        /// </summary>
        [XmlElement("internalError")]
        public LostMsgBase internalError = null;

        /// <summary>
        /// The location profile provided with the location in the request is not valid.
        /// </summary>
        [XmlElement("locationProfileUnrecognized")]
        public LostMsgBase locationProfileUnrecognized = null;

        /// <summary>
        /// The location information provided with the request is not valid.
        /// </summary>
        [XmlElement("locationInvalid")]
        public LostMsgBase locationInvalid = null;

        /// <summary>
        /// The spatial reference system in the location data provided in the request is not valid.
        /// </summary>
        [XmlElement("SRSInvalid")]
        public LostMsgBase SRSInvalid = null;

        /// <summary>
        /// The LoST server detected a loop when performing a recursive lookup.
        /// </summary>
        [XmlElement("loop")]
        public LostMsgBase loop = null;

        /// <summary>
        /// No services found for the location in the request.
        /// </summary>
        [XmlElement("notFound")]
        public LostMsgBase notFound = null;

        /// <summary>
        /// An error occurred in the LoST server.
        /// </summary>
        [XmlElement("serverError")]
        public LostMsgBase serverError = null;

        /// <summary>
        /// A request to a LoST server occurred -- probably during a recursive search.
        /// </summary>
        [XmlElement("serverTimeout")]
        public LostMsgBase serverTimeout = null;

        /// <summary>
        /// The service specified in the request is not implemented by the LoST server.
        /// </summary>
        [XmlElement("serviceNotImplemented")]
        public LostMsgBase serviceNotImplemented = null;
    }

    /// <summary>
    /// Class for handling the warnings element thay may be returned in any of the response classes.
    /// </summary>
    [Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [XmlType(Namespace = "urn:ietf:params:xml:ns:lost1")]
    [XmlRoot("warnings", Namespace = "urn:ietf:params:xml:ns:lost1", IsNullable = false)]
    public class LostWarnings
    {
        /// <summary>
        /// Default constructor
        /// </summary>
        public LostWarnings() { }

        /// <summary>
        /// Specifies the source of the warning
        /// </summary>
        [XmlAttribute("source")]
        public string source = null;

        /// <summary>
        /// Location validation was requested but this service is not provided by the LoST server.
        /// </summary>
        [XmlElement("locationValidationUnavailable")]
        public LostMsgBase locationValidationUnavailable = null;

        /// <summary>
        /// The LoST server substituted the request service type with another service type.
        /// </summary>
        [XmlElement("serviceSubstitution")]
        public LostMsgBase serviceSubstitution = null;

        /// <summary>
        /// The LoST service returned the default mapping for the requested service.
        /// </summary>
        [XmlElement("defaultMappingReturned")]
        public LostMsgBase defaultMappingReturned = null;
    }

    /// <summary>
    /// Base class used for LoST errors and warnings.
    /// </summary>
    [Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [XmlType(Namespace = "urn:ietf:params:xml:ns:lost1")]
    [XmlRootAttribute("message", Namespace = "urn:ietf:params:xml:ns:lost1", IsNullable = false)]
    public class LostMsgBase
    {
        /// <summary>
        /// Default constructor
        /// </summary>
        public LostMsgBase() { }

        /// <summary>
        /// Contains the text of the message
        /// </summary>
        [XmlAttribute("message")]
        public string message = null;

        /// <summary>
        /// Attribute indicating the language of the message
        /// </summary>
        [XmlAttribute("xml:lang")]
        public string lang = "en";
    }

    /// <summary>
    /// Class for handling a redirect response element.
    /// </summary>
    [Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [XmlType(Namespace = "urn:ietf:params:xml:ns:lost1")]
    [XmlRoot("redirect", Namespace = "urn:ietf:params:xml:ns:lost1", IsNullable = false)]
    public class LostRedirect
    {
        /// <summary>
        /// Default constructor
        /// </summary>
        public LostRedirect() { }

        /// <summary>
        /// Specifies the URI of a different LoST server to contact for a redirected request.
        /// </summary>
        [XmlAttribute("target")]
        public string target = null;

        /// <summary>
        /// Specifies the URI of the LoST server that returned the redirect.
        /// </summary>
        [XmlAttribute("source")]
        public string source = null;

        /// <summary>
        /// Text message that may explain the reason for the redirect response
        /// </summary>
        [XmlAttribute("message")]
        public string message = null;

        /// <summary>
        /// Language of the text message
        /// </summary>
        [XmlAttribute("xml:lang")]
        public string lang = "en";
    }
}
