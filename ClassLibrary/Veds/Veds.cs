/////////////////////////////////////////////////////////////////////////////////////
//  File:   Veds.cs                                                 28 Jan 23 PHR
//
//  Revised:    2 Feb 23 PHR
//                -- Added documentation comments
//                -- Modified the ContactInformationType class to change the object[]
//                   Items field to individual fields of arrays of ContactEmailID,
//                   ContactMailingAddress and ContactTelephoneNumber elements to
//                   avoid the need for downcasting to an object.
//                -- Modified the TelephoneNumberType class to change the ComplexObjectType
//                   Item field to individual elements for FullTelephoneNumber and
//                   InternationalTelephoneNumber elements to avoid the need for
//                   downcasting to the ComplexObjectType class.
//                -- Simplified the System.Xml.Serialization namespaces.
/////////////////////////////////////////////////////////////////////////////////////

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// 
// This source code was auto-generated by xsd, Version=4.8.3928.0.
// 

using System.Xml.Serialization;
using System.Xml.Schema;

namespace Veds 
{

    /// <summary>
    /// Base class for a compass heading in the range 0 to 359.
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/domains/maritime/2.1")]
    [XmlRoot("ConveyanceHeadingMeasure", Namespace="http://niem.gov/niem/domains/maritime/2.1", IsNullable=true)]
    public partial class AngleMeasureType : MeasureType {
    }
    
    /// <summary>
    /// Class for storing some kind of measurement.
    /// </summary>
    [XmlInclude(typeof(WeightMeasureType))]
    [XmlInclude(typeof(SpeedMeasureType))]
    [XmlInclude(typeof(AngleMeasureType))]
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    public partial class MeasureType : ComplexObjectType {
        
        /// <summary>
        /// Contains the value of the measurement. Use the Value member of the MeasurePointValueType.
        /// </summary>
        [XmlElement("MeasurePointValue", IsNullable=true)]
        public MeasurePointValueType Item;
        
        /// <summary>
        /// The Value of this TextType member contains the units of the measurement as a string. 
        /// For example "MPH" or "kilograms".
        /// </summary>
        [XmlElement(IsNullable=true)]
        public TextType MeasureUnitText;
    }
    
    /// <summary>
    /// Class for storing the value of a measurement.
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    [XmlRoot("MeasurePointValue", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
    public partial class MeasurePointValueType {
        
        /// <summary>
        /// ID attribute for the measurement point.
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="ID")]
        public string id;
        
        /// <summary>
        /// Metadata attribute for the measurement point.
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string metadata;
        
        /// <summary>
        /// Attribute for the Link for the meta data.
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string linkMetadata;
        
        /// <summary>
        /// Contains the measurment value.
        /// </summary>
        [XmlText()]
        public decimal Value;
    }
    
    /// <summary>
    /// Class for representing the sex of a person in the AACN notification.
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/fbi/2.0")]
    [XmlRoot("PersonSexCode", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
    public partial class SEXCodeType {
        
        /// <summary>
        /// ID attribute.
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="ID")]
        public string id;
        
        /// <summary>
        /// Metadata attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string metadata;
        
        /// <summary>
        /// Link to the metadata attribute.
        /// </summary>
        [XmlAttributeAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string linkMetadata;
        
        /// <summary>
        /// Specifies the sex of the person.
        /// </summary>
        [XmlTextAttribute()]
        public SEXCodeSimpleType Value;
    }
    
    /// <summary>
    /// Enumeration for the sex of a person.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/fbi/2.0")]
    public enum SEXCodeSimpleType {
        
        /// <summary>
        /// Unknown
        /// </summary>
        U,
        
        /// <summary>
        /// Male
        /// </summary>
        M,
        
        /// <summary>
        /// Female
        /// </summary>
        F,
    }

    /// <summary>
    /// Type of device that caused event notification to occur.
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://www.veds.org/acn/3.1")]
    [XmlRoot("NotificationDeviceTypeCode", Namespace="http://www.veds.org/acn/3.1", IsNullable=true)]
    public partial class NotificationDeviceTypeCodeType {
        
        /// <summary>
        /// ID attribute.
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="ID")]
        public string id;
        
        /// <summary>
        /// Metadata attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string metadata;
        
        /// <summary>
        /// Link to the metadata attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string linkMetadata;
        
        /// <summary>
        /// Specifies the device type.
        /// </summary>
        [XmlText()]
        public NotificationDeviceTypeCodeSimpleType Value;
    }
    
    /// <summary>
    /// Enumeration of types of devices that can cause the notification
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://www.veds.org/acn/3.1/codes")]
    public enum NotificationDeviceTypeCodeSimpleType {
        
        /// <remarks/>
        NORMAL,

        /// <summary>
        /// (AACN Airbag)
        /// </summary>
        AIRBAG,

        /// <summary>
        /// AACN Seatbelt Tensioner
        /// </summary>
        TENSIONER,

        /// <summary>
        /// AACN Vehicle Accelerometers
        /// </summary>
        ACCELEROMETERS,

        /// <summary>
        /// Manual Push Button
        /// </summary>
        MANUAL,

        /// <summary>
        /// AACN Injury Severity
        /// </summary>
        INJURY,

        /// <summary>
        /// AACN Other
        /// </summary>
        OTHER,
    }

    /// <summary>
    /// Categorizes the provider or source of the data.
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://www.veds.org/acn/3.1")]
    [XmlRoot("VEDSNotificationOriginatorCode", Namespace="http://www.veds.org/acn/3.1", IsNullable=true)]
    public partial class VEDSNotificationOriginatorCodeType {
        
        /// <summary>
        /// ID attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="ID")]
        public string id;
        
        /// <summary>
        /// Metadata attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string metadata;
        
        /// <summary>
        /// Link metadata attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string linkMetadata;
        
        /// <summary>
        /// Specifies the originator of the VEDS notification
        /// </summary>
        [XmlText()]
        public VEDSNotificationOriginatorCodeSimpleType Value;
    }
    
    /// <summary>
    /// Enumeration of types of notification originators
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://www.veds.org/acn/3.1/codes")]
    public enum VEDSNotificationOriginatorCodeSimpleType {

        /// <summary>
        /// In-Vehicle Telemetry
        /// </summary>
        VEHICLE,

        /// <summary>
        /// Direct Dial
        /// </summary>
        DIRECT,

        /// <summary>
        /// Vehicle Telematics Service Provider
        /// </summary>
        TELEMATICS,

        /// <summary>
        /// Roadside Assistance Provider
        /// </summary>
        ROADSIDE,

        /// <summary>
        /// Commercial Vehicle Operator
        /// </summary>
        COMMERCIAL,

        /// <summary>
        /// Public Safety Answering Point, also known as Emergency Communications Center
        /// </summary>
        PSAP,

        /// <summary>
        /// Public Safety Agency
        /// </summary>
        PSA,
    }

    /// <summary>
    /// Class for specifying a longitudinal coordinate of the incident site
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    [XmlRoot("LongitudeDegreeValue", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
    public partial class LongitudeDegreeType {
        
        /// <summary>
        /// ID attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="ID")]
        public string id;
        
        /// <summary>
        /// Metadata attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string metadata;
        
        /// <summary>
        /// Metadata link attribute.
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string linkMetadata;

        /// <summary>
        /// Longitude in decimal degrees (-180 to +180°)
        /// </summary>
        [XmlText()]
        public decimal Value;
    }

    /// <summary>
    /// Class for specifying a latitudinal coordinate of the incident site
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    [XmlRoot("LatitudeDegreeValue", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
    public partial class LatitudeDegreeType {
        
        /// <summary>
        /// ID attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="ID")]
        public string id;
        
        /// <summary>
        /// Metadata attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string metadata;
        
        /// <summary>
        /// Metadata link attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string linkMetadata;

        /// <summary>
        /// Latitude in decimal degrees (-90° to +90°)
        /// </summary>
        [XmlText()]
        public decimal Value;
    }

    /// <summary>
    /// Map projection and coordinate system recommended for the display of the Longitude and 
    /// Latitude coordinates.
    /// </summary>
    /// <remarks>
    /// NOTE: nc:GeographicDatumCode does not permit WGS84 nor NAD83. However, VEDS is carried in an 
    /// NG9-1-1 call, which conveys a PIDF-LO that can use WGS84 and other values.
    /// </remarks>
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/nga/2.0")]
    [XmlRoot("GeographicDatumCode", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
    public partial class DatumCodeType {
        
        /// <summary>
        /// ID attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="ID")]
        public string id;
        
        /// <summary>
        /// Metadata attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string metadata;
        
        /// <summary>
        /// Metadata link attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string linkMetadata;
        
        /// <summary>
        /// Specifies the geographic datum.
        /// </summary>
        [XmlText()]
        public DatumCodeSimpleType Value;
    }

    /// <summary>
    /// Enumeration of the datum codes available in VEDSs.
    /// </summary>
    /// <remarks>
    /// NOTE: nc:GeographicDatumCode does not permit WGS84 nor NAD83. However, VEDS is carried in an 
    /// NG9-1-1 call, which conveys a PIDF-LO that can use WGS84 and other values.
    /// </remarks>
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/nga/2.0")]
    public enum DatumCodeSimpleType {
        
        /// <remarks/>
        [XmlEnum("SAN-F")]
        SANF,
        
        /// <remarks/>
        GAA,
        
        /// <remarks/>
        ASQ,
        
        /// <remarks/>
        BOO,
        
        /// <remarks/>
        SCK,
        
        /// <remarks/>
        [XmlEnum("SAN-C")]
        SANC,
        
        /// <remarks/>
        MIK,
        
        /// <remarks/>
        [XmlEnum("NAS-L")]
        NASL,
        
        /// <remarks/>
        [XmlEnum("NAR-E")]
        NARE,
        
        /// <remarks/>
        [XmlEnum("PRP-F")]
        PRPF,
        
        /// <remarks/>
        [XmlEnum("ARF-E")]
        ARFE,
        
        /// <remarks/>
        [XmlEnum("AIN-A")]
        AINA,
        
        /// <remarks/>
        HKD,
        
        /// <remarks/>
        EAS,
        
        /// <remarks/>
        [XmlEnum("NAH-C")]
        NAHC,
        
        /// <remarks/>
        SAE,
        
        /// <remarks/>
        [XmlEnum("TOY-C")]
        TOYC,
        
        /// <remarks/>
        [XmlEnum("NAR-B")]
        NARB,
        
        /// <remarks/>
        [XmlEnum("EUR-B")]
        EURB,
        
        /// <remarks/>
        [XmlEnum("MIN-B")]
        MINB,
        
        /// <remarks/>
        NSD,
        
        /// <remarks/>
        [XmlEnum("SAN-L")]
        SANL,
        
        /// <remarks/>
        [XmlEnum("LUZ-B")]
        LUZB,
        
        /// <remarks/>
        PIT,
        
        /// <remarks/>
        HIT,
        
        /// <remarks/>
        TDC,
        
        /// <remarks/>
        [XmlEnum("OGB-M")]
        OGBM,
        
        /// <remarks/>
        [XmlEnum("PRP-D")]
        PRPD,
        
        /// <remarks/>
        AUA,
        
        /// <remarks/>
        DOB,
        
        /// <remarks/>
        VOR,
        
        /// <remarks/>
        [XmlEnum("NAS-Q")]
        NASQ,
        
        /// <remarks/>
        [XmlEnum("EUR-S")]
        EURS,
        
        /// <remarks/>
        [XmlEnum("OHA-C")]
        OHAC,
        
        /// <remarks/>
        [XmlEnum("NAS-R")]
        NASR,
        
        /// <remarks/>
        [XmlEnum("NAS-N")]
        NASN,
        
        /// <remarks/>
        CCD,
        
        /// <remarks/>
        [XmlEnum("EUR-C")]
        EURC,
        
        /// <remarks/>
        LCF,
        
        /// <remarks/>
        [XmlEnum("SAN-G")]
        SANG,
        
        /// <remarks/>
        REU,
        
        /// <remarks/>
        KEG,
        
        /// <remarks/>
        MPO,
        
        /// <remarks/>
        COA,
        
        /// <remarks/>
        CAI,
        
        /// <remarks/>
        PLN,
        
        /// <remarks/>
        NAP,
        
        /// <remarks/>
        WAK,
        
        /// <remarks/>
        [XmlEnum("SAN-M")]
        SANM,
        
        /// <remarks/>
        TRN,
        
        /// <remarks/>
        PTN,
        
        /// <remarks/>
        [XmlEnum("OGB-C")]
        OGBC,
        
        /// <remarks/>
        ISG,
        
        /// <remarks/>
        IDN,
        
        /// <remarks/>
        JOH,
        
        /// <remarks/>
        [XmlEnum("EUR-G")]
        EURG,
        
        /// <remarks/>
        [XmlEnum("SPK-D")]
        SPKD,
        
        /// <remarks/>
        [XmlEnum("SAN-K")]
        SANK,
        
        /// <remarks/>
        YAC,
        
        /// <remarks/>
        KAN,
        
        /// <remarks/>
        MAS,
        
        /// <remarks/>
        [XmlEnum("AIN-B")]
        AINB,
        
        /// <remarks/>
        HEN,
        
        /// <remarks/>
        ENW,
        
        /// <remarks/>
        BAT,
        
        /// <remarks/>
        ATF,
        
        /// <remarks/>
        [XmlEnum("ARF-B")]
        ARFB,
        
        /// <remarks/>
        TIL,
        
        /// <remarks/>
        [XmlEnum("NAS-H")]
        NASH,
        
        /// <remarks/>
        [XmlEnum("IND-P")]
        INDP,
        
        /// <remarks/>
        [XmlEnum("NAS-W")]
        NASW,
        
        /// <remarks/>
        [XmlEnum("OHA-B")]
        OHAB,
        
        /// <remarks/>
        GIZ,
        
        /// <remarks/>
        BUR,
        
        /// <remarks/>
        [XmlEnum("OGB-A")]
        OGBA,
        
        /// <remarks/>
        KEA,
        
        /// <remarks/>
        [XmlEnum("SAN-H")]
        SANH,
        
        /// <remarks/>
        [XmlEnum("SAN-I")]
        SANI,
        
        /// <remarks/>
        PUR,
        
        /// <remarks/>
        [XmlEnum("ADI-M")]
        ADIM,
        
        /// <remarks/>
        CAC,
        
        /// <remarks/>
        FLO,
        
        /// <remarks/>
        HER,
        
        /// <remarks/>
        LIB,
        
        /// <remarks/>
        ZAN,
        
        /// <remarks/>
        [XmlEnum("NAH-B")]
        NAHB,
        
        /// <remarks/>
        [XmlEnum("NAS-U")]
        NASU,
        
        /// <remarks/>
        ASM,
        
        /// <remarks/>
        [XmlEnum("NAS-I")]
        NASI,
        
        /// <remarks/>
        [XmlEnum("NAH-A")]
        NAHA,
        
        /// <remarks/>
        SRL,
        
        /// <remarks/>
        SHB,
        
        /// <remarks/>
        EUS,
        
        /// <remarks/>
        [XmlEnum("ING-B")]
        INGB,
        
        /// <remarks/>
        [XmlEnum("NAS-C")]
        NASC,
        
        /// <remarks/>
        [XmlEnum("SPK-F")]
        SPKF,
        
        /// <remarks/>
        EST,
        
        /// <remarks/>
        [XmlEnum("NAS-P")]
        NASP,
        
        /// <remarks/>
        [XmlEnum("EUR-D")]
        EURD,
        
        /// <remarks/>
        [XmlEnum("OHA-A")]
        OHAA,
        
        /// <remarks/>
        [XmlEnum("EUR-F")]
        EURF,
        
        /// <remarks/>
        [XmlEnum("ARF-H")]
        ARFH,
        
        /// <remarks/>
        HJO,
        
        /// <remarks/>
        [XmlEnum("NAR-D")]
        NARD,
        
        /// <remarks/>
        [XmlEnum("PRP-H")]
        PRPH,
        
        /// <remarks/>
        IBE,
        
        /// <remarks/>
        [XmlEnum("ADI-A")]
        ADIA,
        
        /// <remarks/>
        GEO,
        
        /// <remarks/>
        AMA,
        
        /// <remarks/>
        PHA,
        
        /// <remarks/>
        [XmlEnum("SAN-E")]
        SANE,
        
        /// <remarks/>
        [XmlEnum("OGB-D")]
        OGBD,
        
        /// <remarks/>
        IST,
        
        /// <remarks/>
        [XmlEnum("ARF-C")]
        ARFC,
        
        /// <remarks/>
        [XmlEnum("ADI-B")]
        ADIB,
        
        /// <remarks/>
        GSE,
        
        /// <remarks/>
        [XmlEnum("TOY-M")]
        TOYM,
        
        /// <remarks/>
        [XmlEnum("EUR-M")]
        EURM,
        
        /// <remarks/>
        [XmlEnum("NAS-E")]
        NASE,
        
        /// <remarks/>
        [XmlEnum("SPK-B")]
        SPKB,
        
        /// <remarks/>
        POS,
        
        /// <remarks/>
        CHU,
        
        /// <remarks/>
        [XmlEnum("EUR-A")]
        EURA,
        
        /// <remarks/>
        CAZ,
        
        /// <remarks/>
        QUO,
        
        /// <remarks/>
        DID,
        
        /// <remarks/>
        MVS,
        
        /// <remarks/>
        [XmlEnum("ARS-A")]
        ARSA,
        
        /// <remarks/>
        [XmlEnum("TOY-A")]
        TOYA,
        
        /// <remarks/>
        [XmlEnum("NAS-D")]
        NASD,
        
        /// <remarks/>
        [XmlEnum("PRP-C")]
        PRPC,
        
        /// <remarks/>
        [XmlEnum("OGB-B")]
        OGBB,
        
        /// <remarks/>
        [XmlEnum("ING-A")]
        INGA,
        
        /// <remarks/>
        GUA,
        
        /// <remarks/>
        [XmlEnum("NAS-V")]
        NASV,
        
        /// <remarks/>
        AIA,
        
        /// <remarks/>
        [XmlEnum("ARS-M")]
        ARSM,
        
        /// <remarks/>
        [XmlEnum("SAN-J")]
        SANJ,
        
        /// <remarks/>
        [XmlEnum("EUR-T")]
        EURT,
        
        /// <remarks/>
        [XmlEnum("PRP-E")]
        PRPE,
        
        /// <remarks/>
        [XmlEnum("ADI-E")]
        ADIE,
        
        /// <remarks/>
        AFG,
        
        /// <remarks/>
        MER,
        
        /// <remarks/>
        IRL,
        
        /// <remarks/>
        [XmlEnum("OHA-M")]
        OHAM,
        
        /// <remarks/>
        SAP,
        
        /// <remarks/>
        [XmlEnum("SPK-C")]
        SPKC,
        
        /// <remarks/>
        [XmlEnum("MIN-A")]
        MINA,
        
        /// <remarks/>
        CHI,
        
        /// <remarks/>
        MOD,
        
        /// <remarks/>
        QAT,
        
        /// <remarks/>
        [XmlEnum("PRP-M")]
        PRPM,
        
        /// <remarks/>
        [XmlEnum("NAR-A")]
        NARA,
        
        /// <remarks/>
        [XmlEnum("INF-A")]
        INFA,
        
        /// <remarks/>
        ANO,
        
        /// <remarks/>
        [XmlEnum("EUR-L")]
        EURL,
        
        /// <remarks/>
        HTN,
        
        /// <remarks/>
        PTB,
        
        /// <remarks/>
        [XmlEnum("SPK-G")]
        SPKG,
        
        /// <remarks/>
        PUK,
        
        /// <remarks/>
        BID,
        
        /// <remarks/>
        [XmlEnum("ARF-F")]
        ARFF,
        
        /// <remarks/>
        [XmlEnum("TOY-B")]
        TOYB,
        
        /// <remarks/>
        [XmlEnum("EUR-I")]
        EURI,
        
        /// <remarks/>
        CAP,
        
        /// <remarks/>
        [XmlEnum("NAS-T")]
        NAST,
        
        /// <remarks/>
        SAO,
        
        /// <remarks/>
        [XmlEnum("NAS-B")]
        NASB,
        
        /// <remarks/>
        [XmlEnum("SAN-D")]
        SAND,
        
        /// <remarks/>
        [XmlEnum("EUR-J")]
        EURJ,
        
        /// <remarks/>
        KUS,
        
        /// <remarks/>
        [XmlEnum("OHA-D")]
        OHAD,
        
        /// <remarks/>
        [XmlEnum("NAS-G")]
        NASG,
        
        /// <remarks/>
        [XmlEnum("SAN-B")]
        SANB,
        
        /// <remarks/>
        TAN,
        
        /// <remarks/>
        FOT,
        
        /// <remarks/>
        [XmlEnum("NAR-C")]
        NARC,
        
        /// <remarks/>
        [XmlEnum("ARF-A")]
        ARFA,
        
        /// <remarks/>
        ASC,
        
        /// <remarks/>
        [XmlEnum("PRP-A")]
        PRPA,
        
        /// <remarks/>
        BER,
        
        /// <remarks/>
        [XmlEnum("NAS-J")]
        NASJ,
        
        /// <remarks/>
        [XmlEnum("LUZ-A")]
        LUZA,
        
        /// <remarks/>
        [XmlEnum("SPK-A")]
        SPKA,
        
        /// <remarks/>
        SGM,
        
        /// <remarks/>
        [XmlEnum("ADI-C")]
        ADIC,
        
        /// <remarks/>
        MID,
        
        /// <remarks/>
        [XmlEnum("PRP-G")]
        PRPG,
        
        /// <remarks/>
        [XmlEnum("NAS-O")]
        NASO,
        
        /// <remarks/>
        [XmlEnum("ADI-D")]
        ADID,
        
        /// <remarks/>
        AUG,
        
        /// <remarks/>
        [XmlEnum("IND-I")]
        INDI,
        
        /// <remarks/>
        LEH,
        
        /// <remarks/>
        [XmlEnum("NAS-A")]
        NASA,
        
        /// <remarks/>
        SOA,
        
        /// <remarks/>
        [XmlEnum("ADI-F")]
        ADIF,
        
        /// <remarks/>
        [XmlEnum("EUR-K")]
        EURK,
        
        /// <remarks/>
        OEG,
        
        /// <remarks/>
        [XmlEnum("SPK-E")]
        SPKE,
        
        /// <remarks/>
        [XmlEnum("ARF-M")]
        ARFM,
        
        /// <remarks/>
        [XmlEnum("IND-B")]
        INDB,
        
        /// <remarks/>
        DAL,
        
        /// <remarks/>
        [XmlEnum("EUR-E")]
        EURE,
        
        /// <remarks/>
        CAO,
        
        /// <remarks/>
        [XmlEnum("PRP-B")]
        PRPB,
        
        /// <remarks/>
        GRA,
        
        /// <remarks/>
        FAH,
        
        /// <remarks/>
        VOI,
        
        /// <remarks/>
        CGE,
        
        /// <remarks/>
        [XmlEnum("INH-A")]
        INHA,
        
        /// <remarks/>
        [XmlEnum("NAS-F")]
        NASF,
        
        /// <remarks/>
        [XmlEnum("ARF-G")]
        ARFG,
        
        /// <remarks/>
        [XmlEnum("ARS-B")]
        ARSB,
        
        /// <remarks/>
        [XmlEnum("NAR-H")]
        NARH,
        
        /// <remarks/>
        [XmlEnum("SAN-A")]
        SANA,
        
        /// <remarks/>
        [XmlEnum("EUR-H")]
        EURH,
        
        /// <remarks/>
        [XmlEnum("ARF-D")]
        ARFD,
    }

    /// <summary>
    /// Class for specifying the orientation of vehicle at final rest.
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://www.veds.org/acn/3.1")]
    [XmlRoot("VehicleFinalRestOrientationCategoryCode", Namespace="http://www.veds.org/acn/3.1", IsNullable=true)]
    public partial class VehicleFinalRestOrientationCodeType {
        
        /// <summary>
        /// ID attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="ID")]
        public string id;
        
        /// <summary>
        /// Metadata attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string metadata;
        
        /// <summary>
        /// Metadata link attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string linkMetadata;
        
        /// <summary>
        /// Vehicle orientation
        /// </summary>
        [XmlText()]
        public VehicleFinalRestOrientationCodeSimpleType Value;
    }
    
    /// <summary>
    /// Enumeration of values for the vehicle orientation at rest
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://www.veds.org/acn/3.1/codes")]
    public enum VehicleFinalRestOrientationCodeSimpleType {
        
        /// <summary>
        /// Normal orientation
        /// </summary>
        Normal,
        
        /// <summary>
        /// On the driver's side
        /// </summary>
        Driver,
        
        /// <summary>
        /// On the passenger's side
        /// </summary>
        Passenger,
        
        /// <summary>
        /// On the roof
        /// </summary>
        Roof,

        /// <summary>
        /// Rear Bumper
        /// </summary>
        Rear,

        /// <summary>
        /// Front Bumper
        /// </summary>
        Front,
        
        /// <summary>
        /// Orientation unknow.
        /// </summary>
        Unknown,
    }

    /// <summary>
    /// Class that indicates seat location in the vehicle.
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://www.veds.org/acn/3.1")]
    [XmlRoot("VehicleSeatLocationCategoryCode", Namespace="http://www.veds.org/acn/3.1", IsNullable=true)]
    public partial class VehicleSeatLocationCategoryCodeType {
        
        /// <summary>
        /// ID attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="ID")]
        public string id;
        
        /// <summary>
        /// Metadata attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string metadata;
        
        /// <summary>
        /// Metadata link attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string linkMetadata;

        /// <summary>
        /// Seatbelt and seat sensor data for individual seat positions in the vehicle
        /// </summary>
        [XmlText()]
        public VehicleSeatLocationCategoryCodeSimpleType Value;
    }
    
    /// <summary>
    /// Enumeration of seat location categories.
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://www.veds.org/acn/3.1/codes")]
    public enum VehicleSeatLocationCategoryCodeSimpleType {

        /// <summary>
        /// Driver front
        /// </summary>
        [XmlEnum("1")]
        Item1,

        /// <summary>
        /// Passenger front
        /// </summary>
        [XmlEnum("2")]
        Item2,

        /// <summary>
        /// Second row left
        /// </summary>
        [XmlEnum("3")]
        Item3,

        /// <summary>
        /// Second row middle
        /// </summary>
        [XmlEnum("4")]
        Item4,

        /// <summary>
        /// Second row right
        /// </summary>
        [XmlEnum("5")]
        Item5,

        /// <summary>
        /// Third row left
        /// </summary>
        [XmlEnum("6")]
        Item6,

        /// <summary>
        /// Third row middle
        /// </summary>
        [XmlEnum("7")]
        Item7,

        /// <summary>
        /// Third row right
        /// </summary>
        [XmlEnum("8")]
        Item8,

        /// <summary>
        /// Front row middle
        /// </summary>
        [XmlEnum("9")]
        Item9,
    }
    
    /// <summary>
    /// Class for indication how propulsion energy is stored for the vehicle
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://www.veds.org/acn/3.1")]
    [XmlRoot("VehiclePropulsionStorageCode", Namespace="http://www.veds.org/acn/3.1", IsNullable=true)]
    public partial class VehiclePropulsionStorageCodeType {
        
        /// <summary>
        /// ID attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="ID")]
        public string id;
        
        /// <summary>
        /// Metadata attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string metadata;
        
        /// <summary>
        /// Metadata link attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string linkMetadata;
        
        /// <summary>
        /// Propulsion storage method
        /// </summary>
        [XmlText()]
        public VehiclePropulsionStorageCodeSimpleType Value;
    }
    
    /// <summary>
    /// Enumeration for propusion storage methods
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://www.veds.org/acn/3.1/codes")]
    public enum VehiclePropulsionStorageCodeSimpleType {
        
        /// <remarks/>
        GASOLINE,
        
        /// <remarks/>
        CNG,
        
        /// <remarks/>
        DIESEL,
        
        /// <remarks/>
        ELECTRIC,
        
        /// <remarks/>
        ETHANOL,
        
        /// <remarks/>
        HYDROGEN,
        
        /// <remarks/>
        LPG,
        
        /// <remarks/>
        OTHER,
    }

    /// <summary>
    /// Class for indicating the vehicle's level of sophistication based on the SAE International’s 
    /// Standard J3016, this code list classifies a system’s level of sophistication.
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://www.veds.org/acn/3.1")]
    [XmlRoot("VehicleAutonomousModeCode", Namespace="http://www.veds.org/acn/3.1", IsNullable=true)]
    public partial class VehicleAutonomousCapabilityCodeType {
        
        /// <summary>
        /// ID attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="ID")]
        public string id;
        
        /// <summary>
        /// Metadata attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string metadata;
        
        /// <summary>
        /// Metadata link attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string linkMetadata;
        
        /// <summary>
        /// Autonomous capability/sophistication value
        /// </summary>
        [XmlText()]
        public VehicleAutonomousCapabilityCodeSimpleType Value;
    }
    
    /// <summary>
    /// Enumeration of autonomous capability values
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://www.veds.org/acn/3.1/codes")]
    public enum VehicleAutonomousCapabilityCodeSimpleType {

        /// <summary>
        /// Not Autonomous
        /// </summary>
        [XmlEnum("0")]
        Item0,

        /// <summary>
        /// Driver Assistance
        /// </summary>
        [XmlEnum("1")]
        Item1,

        /// <summary>
        /// Partial Automation
        /// </summary>
        [XmlEnum("2")]
        Item2,

        /// <summary>
        /// Conditional Automation
        /// </summary>
        [XmlEnum("3")]
        Item3,

        /// <summary>
        /// High Automation
        /// </summary>
        [XmlEnum("4")]
        Item4,

        /// <summary>
        /// Complete Automation
        /// </summary>
        [XmlEnum("5")]
        Item5,
    }

    /// <summary>
    /// Class for indicating the Vehicle Body Type.
    /// </summary>
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace="http://niem.gov/niem/mmucc_2/2.1")]
    [XmlRoot("VehicleBodyCategoryCode", Namespace="http://niem.gov/niem/domains/jxdm/4.1", IsNullable=true)]
    public partial class VehicleBodyCategoryCodeType {
        
        /// <summary>
        /// ID attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="ID")]
        public string id;
        
        /// <summary>
        /// Metadata attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string metadata;
        
        /// <summary>
        /// Metadata link attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string linkMetadata;
        
        /// <summary>
        /// Vehicle body category
        /// </summary>
        [XmlText()]
        public VehicleBodyCategoryCodeSimpleType Value;
    }
    
    /// <summary>
    /// Enumeration of vehicle body catoriey values
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/mmucc_2/2.1")]
    public enum VehicleBodyCategoryCodeSimpleType {

        /// <summary>
        /// Other
        /// </summary>
        [XmlEnum("116")]
        Item116,

        /// <summary>
        /// Transit Bus
        /// </summary>
        [XmlEnum("108")]
        Item108,

        /// <summary>
        /// Moped
        /// </summary>
        [XmlEnum("112")]
        Item112,

        /// <summary>
        /// Passenger Van
        /// </summary>
        [XmlEnum("103")]
        Item103,

        /// <summary>
        /// Other Bus
        /// </summary>
        [XmlEnum("110")]
        Item110,

        /// <summary>
        /// Pick Up
        /// </summary>
        [XmlEnum("105")]
        Item105,

        /// <summary>
        /// Medium/Heavy Trucks (more than 10,000 lbs (4,536 kg)
        /// </summary>
        [XmlEnum("115")]
        Item115,

        /// <summary>
        /// Motor Home
        /// </summary>
        [XmlEnum("106")]
        Item106,

        /// <summary>
        /// Low Speed Vehicle
        /// </summary>
        [XmlEnum("113")]
        Item113,

        /// <summary>
        /// (Sport)Utility Vehicle
        /// </summary>
        [XmlEnum("102")]
        Item102,

        /// <summary>
        /// Motor Coach
        /// </summary>
        [XmlEnum("109")]
        Item109,

        /// <summary>
        /// Other Light Trucks (10,000 lbs (4,536 kg) or less)
        /// </summary>
        [XmlEnum("114")]
        Item114,

        /// <summary>
        /// Cargo Van (10,000 lbs (4,536 kg) or less)
        /// </summary>
        [XmlEnum("104")]
        Item104,

        /// <summary>
        /// Motorcycle
        /// </summary>
        [XmlEnum("111")]
        Item111,

        /// <summary>
        /// Passenger Car
        /// </summary>
        [XmlEnum("101")]
        Item101,

        /// <summary>
        /// School Bus
        /// </summary>
        [XmlEnum("107")]
        Item107,
    }

    /// <summary>
    /// Class that indicates the nature of the power source.
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://www.veds.org/acn/3.1")]
    [XmlRoot("PowerSourceCategoryCode", Namespace="http://www.veds.org/acn/3.1", IsNullable=true)]
    public partial class PowerSourceCategoryCodeType {
        
        /// <summary>
        /// ID attribute
        /// </summary>
        [XmlAttributeAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="ID")]
        public string id;
        
        /// <summary>
        /// Metadata attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string metadata;
        
        /// <summary>
        /// Metadata link attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string linkMetadata;
        
        /// <summary>
        /// Indicates the power source category
        /// </summary>
        [XmlText()]
        public PowerSourceCategoryCodeSimpleType Value;
    }
    
    /// <summary>
    /// Enumeration of power source values
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://www.veds.org/acn/3.1/codes")]
    public enum PowerSourceCategoryCodeSimpleType {

        /// <summary>
        /// Main Battery
        /// </summary>
        MAIN,

        /// <summary>
        /// Backup Battery
        /// </summary>
        BACKUP,
        
        /// <summary>
        /// Other
        /// </summary>
        OTHER,
    }
    
    /// <summary>
    /// Class for representing any type of URI
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/proxy/xsd/2.0")]
    [XmlRoot("BinaryLocationURI", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
    public partial class anyURI {
        
        /// <summary>
        /// ID attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="ID")]
        public string id;
        
        /// <summary>
        /// Metadata attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string metadata;
        
        /// <summary>
        /// Metadata link attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string linkMetadata;
        
        /// <summary>
        /// Contains the URI
        /// </summary>
        [XmlText(DataType="anyURI")]
        public string Value;
    }

    /// <summary>
    /// USDOT assigned vehicle number (if commercial); USDOT value could be used for other purposes, 
    /// i.e., LoJack, OnStar, etc.
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/domains/jxdm/4.1")]
    [XmlRoot("CommercialCarrierUSDOTNumber", Namespace="http://niem.gov/niem/domains/jxdm/4.1", IsNullable=true)]
    public partial class CommercialCarrierUSDOTNumberType {
        
        /// <summary>
        /// ID attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="ID")]
        public string id;
        
        /// <summary>
        /// Metadata attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string metadata;
        
        /// <summary>
        /// Metadata link attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string linkMetadata;

        /// <summary>
        /// USDOT number. Format: seven digits (NNNNNNN)
        /// </summary>
        [XmlText(DataType="token")]
        public string Value;
    }
    
    /// <summary>
    /// Class for a boolean value
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/proxy/xsd/2.0")]
    [XmlRoot("ContactInformationIsDayIndicator", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
    public partial class boolean {
        
        /// <summary>
        /// ID attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="ID")]
        public string id;
        
        /// <summary>
        /// Metadata attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string metadata;
        
        /// <summary>
        /// Metadata link attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string linkMetadata;
        
        /// <summary>
        /// The boolean value
        /// </summary>
        [XmlText()]
        public bool Value;
    }

    /// <summary>
    /// Class for categorizing the airbag
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://www.veds.org/acn/3.1")]
    [XmlRoot("AirbagCategoryCode", Namespace="http://www.veds.org/acn/3.1", IsNullable=true)]
    public partial class AirbagCategoryCodeType {
        
        /// <summary>
        /// ID attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="ID")]
        public string id;
        
        /// <summary>
        /// Metadata attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string metadata;
        
        /// <summary>
        /// Metadata link attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string linkMetadata;
        
        /// <summary>
        /// Airbag category enum value
        /// </summary>
        [XmlText()]
        public AirbagCategoryCodeSimpleType Value;
    }
    
    /// <summary>
    /// Enumeration for airbag type or category
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://www.veds.org/acn/3.1/codes")]
    public enum AirbagCategoryCodeSimpleType {
        
        /// <summary>
        /// Front
        /// </summary>
        FRONT,
        
        /// <summary>
        /// Side
        /// </summary>
        SIDE,
        
        /// <summary>
        /// Curtain
        /// </summary>
        CURTAIN,
        
        /// <summary>
        /// Roof
        /// </summary>
        ROOF,

        /// <summary>
        /// Seat belt airbag
        /// </summary>
        SEAT,
    }
    
    /// <summary>
    /// Class for representing a calendar year
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/proxy/xsd/2.0")]
    [XmlRoot("ItemModelYearDate", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
    public partial class gYear {
        
        /// <summary>
        /// ID attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="ID")]
        public string id;
        
        /// <summary>
        /// Metadata attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string metadata;
        
        /// <summary>
        /// Metadata link attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string linkMetadata;
        
        /// <summary>
        /// The calendar year as a string
        /// </summary>
        [XmlText(DataType="gYear")]
        public string Value;
    }

    /// <summary>
    /// Class for representing a NIEM format date and time in UTC format (for example: 
    /// 2018-01-04T02:29:35.0Z)
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/proxy/xsd/2.0")]
    [XmlRoot("DateTime", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
    public partial class dateTime {
        
        /// <summary>
        /// ID attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="ID")]
        public string id;
        
        /// <summary>
        /// Metadata attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string metadata;
        
        /// <summary>
        /// Metadata link attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string linkMetadata;
        
        /// <summary>
        /// UTC date/time
        /// </summary>
        [XmlText()]
        public DateTime Value;
    }
    
    /// <summary>
    /// Class for representing a NIEM format date
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/proxy/xsd/2.0")]
    [XmlRoot("Date", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
    public partial class date {
        
        /// <summary>
        /// ID attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="ID")]
        public string id;
        
        /// <summary>
        /// Metadata attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string metadata;
        
        /// <summary>
        /// Metadata link attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string linkMetadata;
        
        /// <summary>
        /// The date value
        /// </summary>
        [XmlText(DataType="date")]
        public System.DateTime Value;
    }
    
    /// <summary>
    /// Class for representing a non-negative number
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/proxy/xsd/2.0")]
    [XmlRoot("CrashPulsePrincipalDirectionOfForceValue", Namespace="http://www.veds.org/acn/3.1", IsNullable=true)]
    public partial class nonNegativeInteger {
        
        /// <summary>
        /// ID attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="ID")]
        public string id;
        
        /// <summary>
        /// Metadata attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string metadata;
        
        /// <summary>
        /// Metadata link attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string linkMetadata;
        
        /// <summary>
        /// Non-negative number as a string
        /// </summary>
        [XmlText(DataType="nonNegativeInteger")]
        public string Value;
    }

    /// <summary>
    /// Class for describing the role of any person involved in the crash or other incident.
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://www.veds.org/acn/3.1")]
    [XmlRoot("CrashPersonRoleCode", Namespace="http://www.veds.org/acn/3.1", IsNullable=true)]
    public partial class CrashPersonRoleCodeType {
        
        /// <summary>
        /// ID attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="ID")]
        public string id;
        
        /// <summary>
        /// Metadata attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string metadata;
        
        /// <summary>
        /// Metadata link attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string linkMetadata;
        
        /// <summary>
        /// The role of a person involved in the crash
        /// </summary>
        [XmlText()]
        public CrashPersonRoleCodeSimpleType Value;
    }

    /// <summary>
    /// Enumeration of the roles of any person involved in the crash or other incident.
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://www.veds.org/acn/3.1/codes")]
    public enum CrashPersonRoleCodeSimpleType {

        /// <summary>
        /// Confirmed Driver
        /// </summary>
        CONFIRMED,

        /// <summary>
        /// Primary Driver
        /// </summary>
        PRIMARY,

        /// <summary>
        /// Frequent Driver
        /// </summary>
        FREQUENT,

        /// <summary>
        /// Passenger
        /// </summary>
        PASSENGER,

        /// <summary>
        /// Telematics Service Subscriber
        /// </summary>
        SUBSCRIBER,

        /// <summary>
        /// Vehicle Owner
        /// </summary>
        OWNER,
    }
    
    /// <summary>
    /// Class for a NIEM string value
    /// </summary>
    [XmlInclude(typeof(TextType))]
    [XmlInclude(typeof(ProperNameTextType))]
    [XmlInclude(typeof(PersonNameTextType))]
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/proxy/xsd/2.0")]
    [XmlRoot("ContactEmailID", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
    public partial class @string {
        
        /// <summary>
        /// ID attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="ID")]
        public string id;
        
        /// <summary>
        /// Metadata attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string metadata;
        
        /// <summary>
        /// Metadata link attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, Namespace="http://niem.gov/niem/structures/2.0", DataType="IDREFS")]
        public string linkMetadata;
        
        /// <summary>
        /// Contains the string
        /// </summary>
        [XmlText()]
        public string Value;
    }
    
    /// <summary>
    /// Class for the NIEM TextType. This is a string value located in the Value field.
    /// </summary>
    [XmlInclude(typeof(ProperNameTextType))]
    [XmlInclude(typeof(PersonNameTextType))]
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    [XmlRoot("DrivingIncidentPassengerQuantityText", Namespace="http://niem.gov/niem/domains/jxdm/4.1", IsNullable=true)]
    public partial class TextType : @string {
    }
    
    /// <summary>
    /// Base class for classes containing names of people or objects
    /// </summary>
    [XmlInclude(typeof(PersonNameTextType))]
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    [XmlRoot("ItemMakeName", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
    public partial class ProperNameTextType : TextType {
    }
    
    /// <summary>
    /// Class for a person name
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    [XmlRoot("PersonFullName", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
    public partial class PersonNameTextType : ProperNameTextType {
    }
    
    /// <summary>
    /// Class for a ref attribute that points to the id attribute of another element in
    /// the XML document
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/structures/2.0")]
    [XmlRoot("ActivityReference", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=false)]
    public partial class ReferenceType {
        
        /// <summary>
        /// ID attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, DataType="ID")]
        public string id;
        
        /// <summary>
        /// ref attribute that refers to the id attribute of another element
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, DataType="IDREF")]
        public string @ref;
        
        /// <summary>
        /// Metadata link attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, DataType="IDREFS")]
        public string linkMetadata;
    }
    
    /// <summary>
    /// Abstract base class for all elements in the XML document.
    /// </summary>
    [XmlInclude(typeof(DriverLicenseBaseType))]
    [XmlInclude(typeof(DriverLicenseType))]
    [XmlInclude(typeof(PersonLanguageType))]
    [XmlInclude(typeof(PersonNameType))]
    [XmlInclude(typeof(PersonType))]
    [XmlInclude(typeof(PersonType1))]
    [XmlInclude(typeof(OrganizationType))]
    [XmlInclude(typeof(NotificationOriginatingOrganizationType))]
    [XmlInclude(typeof(NotificationDestinationOrganizationType))]
    [XmlInclude(typeof(LongitudeCoordinateType))]
    [XmlInclude(typeof(LatitudeCoordinateType))]
    [XmlInclude(typeof(TwoDimensionalGeographicCoordinateType))]
    [XmlInclude(typeof(LocationType))]
    [XmlInclude(typeof(DocumentType))]
    [XmlInclude(typeof(AutomatedCrashNotificationType))]
    [XmlInclude(typeof(CrossStreetType))]
    [XmlInclude(typeof(ContactInformationType))]
    [XmlInclude(typeof(ContactInformationType1))]
    [XmlInclude(typeof(AssociationType))]
    [XmlInclude(typeof(PersonContactInformationAssociationType))]
    [XmlInclude(typeof(OrganizationContactInformationAssociationType))]
    [XmlInclude(typeof(ActivityLocationAssociationType))]
    [XmlInclude(typeof(StreetType))]
    [XmlInclude(typeof(StructuredAddressType))]
    [XmlInclude(typeof(AddressType))]
    [XmlInclude(typeof(InternationalTelephoneNumberType))]
    [XmlInclude(typeof(FullTelephoneNumberType))]
    [XmlInclude(typeof(TelephoneNumberType))]
    [XmlInclude(typeof(VehicleSeatType))]
    [XmlInclude(typeof(BinaryType))]
    [XmlInclude(typeof(ImageType))]
    [XmlInclude(typeof(AirbagType))]
    [XmlInclude(typeof(ItemType))]
    [XmlInclude(typeof(TangibleItemType))]
    [XmlInclude(typeof(ConveyanceType))]
    [XmlInclude(typeof(VehicleType))]
    [XmlInclude(typeof(CrashVehicleType))]
    [XmlInclude(typeof(MeasureType))]
    [XmlInclude(typeof(WeightMeasureType))]
    [XmlInclude(typeof(SpeedMeasureType))]
    [XmlInclude(typeof(AngleMeasureType))]
    [XmlInclude(typeof(DateType))]
    [XmlInclude(typeof(ActivityType))]
    [XmlInclude(typeof(ContactActivityType))]
    [XmlInclude(typeof(VehicleCrashPulseType))]
    [XmlInclude(typeof(IncidentType))]
    [XmlInclude(typeof(DrivingIncidentType))]
    [XmlInclude(typeof(CrashType))]
    [XmlInclude(typeof(CrashType1))]
    [XmlInclude(typeof(IdentificationType))]
    [XmlInclude(typeof(CrashPersonType))]
    [XmlInclude(typeof(CrashPersonType1))]
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/structures/2.0")]
    public abstract partial class ComplexObjectType {
        
        /// <summary>
        /// ID attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, DataType="ID")]
        public string id;
        
        /// <summary>
        /// Metadata attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, DataType="IDREFS")]
        public string metadata;
        
        /// <summary>
        /// Metadata link attribute
        /// </summary>
        [XmlAttribute(Form=XmlSchemaForm.Qualified, DataType="IDREFS")]
        public string linkMetadata;
    }
    
    /// <summary>
    /// Base class for a driver license
    /// </summary>
    [XmlInclude(typeof(DriverLicenseType))]
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    public partial class DriverLicenseBaseType : ComplexObjectType {
        
        /// <summary>
        /// Driver's license identification number and jurisdiction information
        /// </summary>
        [XmlElement(IsNullable=true)]
        public IdentificationType DriverLicenseIdentification;
    }
    
    /// <summary>
    /// Class that contains an identification number and identification of a jurisdiction
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    [XmlRoot("ActivityIdentification", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
    public partial class IdentificationType : ComplexObjectType {
        
        /// <summary>
        /// Identification number.
        /// </summary>
        [XmlElement(IsNullable=true)]
        public @string IdentificationID;
        
        /// <summary>
        /// Identification of the jurisdiction (state or provice)
        /// </summary>
        [XmlElement("IdentificationJurisdictionText", IsNullable=true)]
        public TextType Item;
    }
    
    /// <summary>
    /// Class for a driver's license
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    [XmlRoot("DriverLicense", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
    public partial class DriverLicenseType : DriverLicenseBaseType {
    }
    
    /// <summary>
    /// Class for indicating the lauguage of a person
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    [XmlRoot("PersonPrimaryLanguage", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
    public partial class PersonLanguageType : ComplexObjectType {
        
        /// <summary>
        /// Identifies the language
        /// </summary>
        [XmlElement("LanguageName", IsNullable=true)]
        public TextType Item;
    }
    
    /// <summary>
    /// Class for representing a person name
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    [XmlRoot("PersonName", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
    public partial class PersonNameType : ComplexObjectType {
        
        /// <summary>
        /// Full name of the person
        /// </summary>
        [XmlElement(IsNullable=true)]
        public PersonNameTextType PersonFullName;
    }
    
    /// <summary>
    /// Base class for a Person object
    /// </summary>
    [XmlInclude(typeof(PersonType1))]
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    public partial class PersonType : ComplexObjectType {
        
        /// <summary>
        /// Date of birth
        /// </summary>
        [XmlElement(IsNullable=true)]
        public DateType PersonBirthDate;
        
        /// <summary>
        /// The person's full name
        /// </summary>
        [XmlElement(IsNullable=true)]
        public PersonNameType PersonName;
        
        /// <summary>
        /// The person's primary language
        /// </summary>
        [XmlElement(IsNullable=true)]
        public PersonLanguageType PersonPrimaryLanguage;
        
        /// <summary>
        /// The person's sex
        /// </summary>
        [XmlElement("PersonSexCode", IsNullable=true)]
        public SEXCodeType Item;
    }
    
    /// <summary>
    /// Class for representing either a NIEM date or a NIEM dateTime object.
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    [XmlRoot("ActivityDate", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
    public partial class DateType : ComplexObjectType {
        
        /// <summary>
        /// This object can contain either a NIEM date or a NIEM dateTime element.
        /// </summary>
        [XmlElement("Date", typeof(date), IsNullable=true)]
        [XmlElement("DateTime", typeof(dateTime), IsNullable=true)]
        public object Item;
    }
    
    /// <summary>
    /// Class for a person
    /// </summary>
    [Serializable()]
    [XmlType(TypeName="PersonType", Namespace="http://www.veds.org/acn/3.1")]
    [XmlRoot("Person", Namespace="http://www.veds.org/acn/3.1", IsNullable=true)]
    public partial class PersonType1 : PersonType {
        
        /// <summary>
        /// Drivers license information
        /// </summary>
        [XmlElement("DriverLicense", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
        public DriverLicenseType[] DriverLicense;

        /// <summary>
        /// Indicates whether the person is hearing impaired
        /// </summary>
        [XmlElement("PersonHearingImpairedIndicator", IsNullable=true)]
        public boolean[] PersonHearingImpairedIndicator;

        /// <summary>
        /// Indicates whether the person is mobility impaired
        /// </summary>
        [XmlElement("PersonMobilityImpairedIndicator", IsNullable=true)]
        public boolean[] PersonMobilityImpairedIndicator;

        /// <summary>
        /// Other condition information that may be of use to responders.
        /// </summary>
        [XmlElement("PersonOtherConditionsText", IsNullable=true)]
        public TextType[] PersonOtherConditionsText;

        /// <summary>
        /// Indicates whether the person is speech impaired.
        /// </summary>
        [XmlElement("PersonSpeechImpairedIndicator", IsNullable=true)]
        public boolean[] PersonSpeechImpairedIndicator;
    }
    
    /// <summary>
    /// Base class for different types of organizations
    /// </summary>
    [XmlInclude(typeof(NotificationOriginatingOrganizationType))]
    [XmlInclude(typeof(NotificationDestinationOrganizationType))]
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    public partial class OrganizationType : ComplexObjectType {
        
        /// <summary>
        /// Identification of the organization
        /// </summary>
        [XmlElement(IsNullable=true)]
        public IdentificationType OrganizationIdentification;

        /// <summary>
        /// Name of provider or system providing data.
        /// </summary>
        [XmlElement(IsNullable=true)]
        public TextType OrganizationName;
    }
    
    /// <summary>
    /// Class containing information about the organization that originated the notification.
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://www.veds.org/acn/3.1")]
    [XmlRoot("NotificationOriginatingOrganization", Namespace="http://www.veds.org/acn/3.1", IsNullable=true)]
    public partial class NotificationOriginatingOrganizationType : OrganizationType {

        /// <summary>
        /// ID of the employee that initiated the data transmission to the ECC. Typically, an employee’s 
        /// initials or other ID.
        /// </summary>
        [XmlElement("EmployeeIdentification", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
        public IdentificationType[] EmployeeIdentification;

        /// <summary>
        /// Indicates if the source providing the data is the originator of the incident.
        /// </summary>
        [XmlElement("IncidentOriginatorIndicator", IsNullable=true)]
        public boolean[] IncidentOriginatorIndicator;

        /// <summary>
        /// Categorizes the provider or source of the data.
        /// </summary>
        [XmlElement("VEDSNotificationOriginatorCode", IsNullable=true)]
        public VEDSNotificationOriginatorCodeType[] VEDSNotificationOriginatorCode;
    }
    
    /// <summary>
    /// Identifies the agency that was notified
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://www.veds.org/acn/3.1")]
    [XmlRoot("NotificationDestinationOrganization", Namespace="http://www.veds.org/acn/3.1", IsNullable=true)]
    public partial class NotificationDestinationOrganizationType : OrganizationType {

        /// <summary>
        /// Identification number or name of individual at agency who received call.
        /// </summary>
        [XmlElement("EmployeeIdentification", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
        public IdentificationType[] EmployeeIdentification;
    }
    
    /// <summary>
    /// Longitude coordinate
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    [XmlRoot("GeographicCoordinateLongitude", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
    public partial class LongitudeCoordinateType : ComplexObjectType {
        
        /// <summary>
        /// Longitude in degrees
        /// </summary>
        [XmlElement(IsNullable=true)]
        public LongitudeDegreeType LongitudeDegreeValue;
    }
    
    /// <summary>
    /// Latitude coordinate
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    [XmlRoot("GeographicCoordinateLatitude", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
    public partial class LatitudeCoordinateType : ComplexObjectType {
        
        /// <summary>
        /// Latitude in degrees
        /// </summary>
        [XmlElement(IsNullable=true)]
        public LatitudeDegreeType LatitudeDegreeValue;
    }
    
    /// <summary>
    /// Two dimension geographic coordinates
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    [XmlRoot("LocationTwoDimensionalGeographicCoordinate", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
    public partial class TwoDimensionalGeographicCoordinateType : ComplexObjectType {

        /// <summary>
        /// Map projection and coordinate system recommended for the display of the Longitude and Latitude 
        /// coordinates.
        /// </summary>
        [XmlElement(IsNullable=true)]
        public DatumCodeType GeographicDatumCode;
        
        /// <summary>
        /// Latitude coordinate
        /// </summary>
        [XmlElement(IsNullable=true)]
        public LatitudeCoordinateType GeographicCoordinateLatitude;
        
        /// <summary>
        /// Longitude coordinate
        /// </summary>
        [XmlElement(IsNullable=true)]
        public LongitudeCoordinateType GeographicCoordinateLongitude;
    }
    
    /// <summary>
    /// Class for describing the location of the crash
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    [XmlRoot("Location", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
    public partial class LocationType : ComplexObjectType {
        
        /// <summary>
        /// Address information for the location.
        /// </summary>
        [XmlElement(IsNullable=true)]
        public AddressType LocationAddress;
        
        /// <summary>
        /// Array of cross streets of an intersection
        /// </summary>
        [XmlElement("LocationCrossStreet", IsNullable=true)]
        public CrossStreetType[] LocationCrossStreet;
        
        /// <summary>
        /// Text description of the location
        /// </summary>
        [XmlElement(IsNullable=true)]
        public TextType LocationDescriptionText;
        
        /// <summary>
        /// Coordinates and datum of the location
        /// </summary>
        [XmlElement(IsNullable=true)]
        public TwoDimensionalGeographicCoordinateType LocationTwoDimensionalGeographicCoordinate;
    }
    
    /// <summary>
    /// Class for representing a street address. The address may be either text that contains
    /// the full address or a structured address type.
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    [XmlRoot("ContactMailingAddress", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
    public partial class AddressType : ComplexObjectType {
        
        /// <summary>
        /// This element may contain text containing the full street address or a structure
        /// address object.
        /// </summary>
        [XmlElement("AddressFullText", typeof(TextType), IsNullable=true)]
        [XmlElement("StructuredAddress", typeof(StructuredAddressType), IsNullable=true)]
        public object Item;
    }
    
    /// <summary>
    /// Class for a structured street address
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    [XmlRoot("StructuredAddress", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
    public partial class StructuredAddressType : ComplexObjectType {
        
        /// <summary>
        /// Contains the street address components
        /// </summary>
        [XmlElement("LocationStreet", IsNullable=true)]
        public StreetType Item;
    }
    
    /// <summary>
    /// Class that contains the individual components of a street address
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    [XmlRoot("LocationStreet", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
    public partial class StreetType : ComplexObjectType {

        /// <summary>
        /// A number that identifies a particular unit or location within a street.
        /// </summary>
        [XmlElement(IsNullable=true)]
        public TextType StreetNumberText;

        /// <summary>
        /// A direction that appears before a street name.
        /// </summary>
        [XmlElement(IsNullable=true)]
        public TextType StreetPredirectionalText;

        /// <summary>
        /// A name of a street.
        /// </summary>
        [XmlElement(IsNullable=true)]
        public ProperNameTextType StreetName;

        /// <summary>
        /// A kind of street.
        /// </summary>
        [XmlElement(IsNullable=true)]
        public TextType StreetCategoryText;

        /// <summary>
        /// A direction that appears after a street name.
        /// </summary>
        [XmlElement(IsNullable=true)]
        public TextType StreetPostdirectionalText;
    }
    
    /// <summary>
    /// Class for describing the cross streets.
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    [XmlRoot("LocationCrossStreet", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
    public partial class CrossStreetType : ComplexObjectType {
        
        /// <summary>
        /// Text describing the cross street
        /// </summary>
        [XmlElement("CrossStreetDescriptionText", IsNullable=true)]
        public TextType[] CrossStreetDescriptionText;
    }
    
    /// <summary>
    /// Describes the AutomatedCrashNotification document
    /// </summary>
    [XmlInclude(typeof(AutomatedCrashNotificationType))]
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    public partial class DocumentType : ComplexObjectType {

        /// <summary>
        /// Field for Comment. Free form text.
        /// </summary>
        [XmlElement(IsNullable=true)]
        public TextType DocumentDescriptionText;

        /// <summary>
        /// UTC date and time that the incident data was transmitted to the PSAP when such a transport 
        /// mechanism exists such as NLETS or NG9-1-1.
        /// </summary>
        [XmlElement(IsNullable=true)]
        public DateType DocumentPostDate;

        /// <summary>
        /// UTC date and time that the incident originator received notification of the incident.
        /// </summary>
        [XmlElement(IsNullable=true)]
        public DateType DocumentReceivedDate;
    }
    
    /// <summary>
    /// This is the class for the root element of an Advanced Automated Crash Notification XML document.
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://www.veds.org/acn/3.1")]
    [XmlRoot("AutomatedCrashNotification", Namespace="http://www.veds.org/acn/3.1", IsNullable=true)]
    public partial class AutomatedCrashNotificationType : DocumentType {

        /// <summary>
        /// Indicates if there was confirmation (either verbal or electronic) of the event by the 
        /// incident originator and a PSAP or other public safety agency.
        /// </summary>
        [XmlElement("EventVerifiedIndicator", IsNullable=true)]
        public boolean[] EventVerifiedIndicator;

        /// <summary>
        /// 7 X 24 telephone number to contact the originating agency. Format: NPA-NXX-LINE
        /// </summary>
        [XmlElement("ContactActivity", IsNullable=true)]
        public ContactActivityType[] ContactActivity;

        /// <summary>
        /// ID for each emergency contact: 0 to infinity. Format: Numeric
        /// </summary>
        [XmlElement("ContactInformation", IsNullable=true)]
        public ContactInformationType1[] ContactInformation;
        
        /// <summary>
        /// Contains information about the crash
        /// </summary>
        [XmlElement("Crash", IsNullable=true)]
        public CrashType1[] Crash;

        /// <summary>
        /// Contains the location information of the crash.
        /// </summary>
        /// <remarks>
        /// NOTE: VEDS does not permit WGS84 nor NAD83. NG9-1-1 requires WGS84. However, VEDS is 
        /// carried in an NG9-1-1 call,  which conveys a PIDF-LO that can use WGS84 and other values.
        /// </remarks>
        [XmlElement("Location", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
        public LocationType[] Location;
        
        /// <summary>
        /// Organization that was notified.
        /// </summary>
        [XmlElement("NotificationDestinationOrganization", IsNullable=true)]
        public NotificationDestinationOrganizationType[] NotificationDestinationOrganization;

        /// <summary>
        /// Type of device that caused event notification to occur
        /// </summary>
        [XmlElement("NotificationDeviceTypeCode", IsNullable=true)]
        public NotificationDeviceTypeCodeType[] NotificationDeviceTypeCode;
        
        /// <summary>
        /// Information about the originating organization
        /// </summary>
        [XmlElement("NotificationOriginatingOrganization", IsNullable=true)]
        public NotificationOriginatingOrganizationType[] NotificationOriginatingOrganization;

        /// <summary>
        /// Common details about any person involved in a traffic accident or other incident.
        /// </summary>
        [XmlElement("Person", IsNullable=true)]
        public PersonType1[] Person;
        
        /// <summary>
        /// Contains references to activities and locations
        /// </summary>
        [XmlElement("ActivityLocationAssociation", Namespace="http://niem.gov/niem/domains/jxdm/4.1", IsNullable=true)]
        public ActivityLocationAssociationType[] ActivityLocationAssociation;
        
        /// <summary>
        /// Contains references to organizations and contact information elements
        /// </summary>
        [XmlElement("OrganizationContactInformationAssociation", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
        public OrganizationContactInformationAssociationType[] OrganizationContactInformationAssociation;
        
        /// <summary>
        /// Contains references to persons and contact information elements
        /// </summary>
        [XmlElement("PersonContactInformationAssociation", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
        public PersonContactInformationAssociationType[] PersonContactInformationAssociation;
    }
    
    /// <summary>
    /// Contains the telephone number of a contact
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://www.veds.org/acn/3.1")]
    [XmlRoot("ContactActivity", Namespace="http://www.veds.org/acn/3.1", IsNullable=true)]
    public partial class ContactActivityType : ActivityType {
        
        /// <summary>
        /// Contains contact telephone numbers
        /// </summary>
        [XmlElement("ContactTelephoneNumber", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
        public TelephoneNumberType[] ContactTelephoneNumber;
    }
    
    /// <summary>
    /// Class for a full telephone number or an international telephone number
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    [XmlRoot("ContactTelephoneNumber", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
    public partial class TelephoneNumberType : ComplexObjectType {

        // This is the original code generated by xsd.exe. The Item object can be either a
        // FullTelephoneNumber or an InternationalTelephoneNumber. This type of downcasting is
        // difficult to use so the Item element has be replaced with individul elements for
        // FullTelephoneNumber and InternationalTelephoneNumber.
        //[XmlElement("FullTelephoneNumber", typeof(FullTelephoneNumberType), IsNullable=true)]
        //[XmlElement("InternationalTelephoneNumber", typeof(InternationalTelephoneNumberType), IsNullable=true)]
        //public ComplexObjectType Item;

        /// <summary>
        /// Contains a full north American numbering plan telephone number. If this field is used then
        /// the InternationalTelephoneNumber field must be null.
        /// </summary>
        [XmlElement("FullTelephoneNumber")]
        public FullTelephoneNumberType FullTelephoneNumber;

        /// <summary>
        /// Contains an international telephone number. If this field is used then the FullTelephoneNumber
        /// must be null.
        /// </summary>
        [XmlElement("InternationalTelephoneNumber")]
        public InternationalTelephoneNumberType InternationalTelephoneNumber;
    }
    
    /// <summary>
    /// Class for representing a full telephone number
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    [XmlRoot("FullTelephoneNumber", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
    public partial class FullTelephoneNumberType : ComplexObjectType {
        
        /// <summary>
        /// Contains the full 10-digit phone number
        /// </summary>
        [XmlElement("TelephoneNumberFullID", IsNullable=true)]
        public @string[] TelephoneNumberFullID;
        
        /// <summary>
        /// To Be Determined (TBD)
        /// </summary>
        [XmlElement("TelephoneSuffixID", IsNullable=true)]
        public @string[] TelephoneSuffixID;
    }
    
    /// <summary>
    /// Class for representing an international telephone number
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    [XmlRoot("InternationalTelephoneNumber", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
    public partial class InternationalTelephoneNumberType : ComplexObjectType {

        /// <summary>
        /// Contains the ITU-T Country Code
        /// </summary>
        [XmlElement(IsNullable=true)]
        public @string TelephoneCountryCodeID;
        
        /// <summary>
        /// Contains the telephone number
        /// </summary>
        [XmlElement(IsNullable=true)]
        public @string TelephoneNumberID;
    }
    
    /// <summary>
    /// Identifies an activity
    /// </summary>
    [XmlInclude(typeof(ContactActivityType))]
    [XmlInclude(typeof(VehicleCrashPulseType))]
    [XmlInclude(typeof(IncidentType))]
    [XmlInclude(typeof(DrivingIncidentType))]
    [XmlInclude(typeof(CrashType))]
    [XmlInclude(typeof(CrashType1))]
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    public partial class ActivityType : ComplexObjectType {
        
        /// <summary>
        /// Identification of the activity
        /// </summary>
        [XmlElement(IsNullable=true)]
        public IdentificationType ActivityIdentification;
        
        /// <summary>
        /// Date of the activity
        /// </summary>
        [XmlElement("ActivityDate", IsNullable=true)]
        public DateType Item;
    }

    /// <summary>
    /// Crash data about the impact
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://www.veds.org/acn/3.1")]
    [XmlRoot("VehicleCrashPulse", Namespace="http://www.veds.org/acn/3.1", IsNullable=true)]
    public partial class VehicleCrashPulseType : ActivityType {

        /// <summary>
        /// Force of impact based on the change in velocity over the duration of the crash pulse 
        /// (measured in units of 0-999 KPH or MPH.
        /// </summary>
        [XmlElement("CrashPulseChangeInVelocityMeasure", IsNullable=true)]
        public SpeedMeasureType[] CrashPulseChangeInVelocityMeasure;

        /// <summary>
        /// Principal direction of the force of the impact to nearest O’clock Reading(valid numbers 
        /// are integers 1 through 12, where 12 O’clock corresponds to a frontal collision, 3 O’clock 
        /// corresponds to a passenger side (right side) collision etc.
        /// </summary>
        [XmlElement("CrashPulsePrincipalDirectionOfForceValue", IsNullable=true)]
        public nonNegativeInteger[] CrashPulsePrincipalDirectionOfForceValue;

        /// <summary>
        /// Number of quarter turns in concert with a rollover. Expressed as a non-negative integer. 
        /// Format: Non-negative integer 
        /// </summary>
        [XmlElement("CrashPulseRolloverQuarterTurnsValue", IsNullable=true)]
        public nonNegativeInteger[] CrashPulseRolloverQuarterTurnsValue;
    }
    
    /// <summary>
    /// Class for a measure of speed
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    [XmlRoot("CrashPulseChangeInVelocityMeasure", Namespace="http://www.veds.org/acn/3.1", IsNullable=true)]
    public partial class SpeedMeasureType : MeasureType {
    }
    
    /// <summary>
    /// Basic incident type description
    /// </summary>
    [XmlInclude(typeof(DrivingIncidentType))]
    [XmlInclude(typeof(CrashType))]
    [XmlInclude(typeof(CrashType1))]
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    public partial class IncidentType : ActivityType {
    }
    
    /// <summary>
    /// Describes a driving incident
    /// </summary>
    [XmlInclude(typeof(CrashType))]
    [XmlInclude(typeof(CrashType1))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace="http://niem.gov/niem/domains/jxdm/4.1")]
    public partial class DrivingIncidentType : IncidentType {
        
        /// <summary>
        /// Number of passengers in the vehicle
        /// </summary>
        [XmlElement(IsNullable=true)]
        public TextType DrivingIncidentPassengerQuantityText;
    }
    
    /// <summary>
    /// Basic crash type
    /// </summary>
    [XmlInclude(typeof(CrashType1))]
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/domains/jxdm/4.1")]
    public partial class CrashType : DrivingIncidentType {
    }
    
    /// <summary>
    /// This is the class for the Crash element in the AutomatedCrashNotificationType XML document
    /// </summary>
    [Serializable()]
    [XmlType(TypeName="CrashType", Namespace="http://www.veds.org/acn/3.1")]
    [XmlRoot("Crash", Namespace="http://www.veds.org/acn/3.1", IsNullable=true)]
    public partial class CrashType1 : CrashType {

        /// <summary>
        /// Direction vehicle was heading directly before crash, as a measure of the angular heading 
        /// of the vehicle.
        /// </summary>
        [XmlElement("ConveyanceHeadingMeasure", Namespace="http://niem.gov/niem/domains/maritime/2.1", IsNullable=true)]
        public AngleMeasureType[] ConveyanceHeadingMeasure;
        
        /// <summary>
        /// Array of persons involved in the crash
        /// </summary>
        [XmlElement("CrashPerson", IsNullable=true)]
        public CrashPersonType1[] CrashPerson;
        
        /// <summary>
        /// Array of vehicles involved in the crash
        /// </summary>
        [XmlElement("CrashVehicle", IsNullable=true)]
        public CrashVehicleType[] CrashVehicle;
        
        /// <summary>
        /// If true then fuel is leaking
        /// </summary>
        [XmlElement("FuelLeakingIndicator", IsNullable=true)]
        public boolean[] FuelLeakingIndicator;

        /// <summary>
        /// Indicates if the vehicle was subjected to multiple impacts.
        /// </summary>
        [XmlElement("MultipleImpactsIndicator", IsNullable=true)]
        public boolean[] MultipleImpactsIndicator;

        /// <summary>
        /// High Likelihood of Severe Injury?
        /// </summary>
        [XmlElement("SevereInjuryIndicator", IsNullable=true)]
        public boolean[] SevereInjuryIndicator;

        /// <summary>
        /// Orientation of vehicle at final rest.
        /// </summary>
        [XmlElement("VehicleFinalRestOrientationCategoryCode", IsNullable=true)]
        public VehicleFinalRestOrientationCodeType[] VehicleFinalRestOrientationCategoryCode;

        /// <summary>
        /// Indicates if any part of the vehicle is on fire.
        /// </summary>
        [XmlElement("VehicleFireIndicator", IsNullable=true)]
        public boolean[] VehicleFireIndicator;
    }

    /// <summary>
    /// Common details about any person involved in a traffic accident or other incident.
    /// </summary>
    [Serializable()]
    [XmlType(TypeName="CrashPersonType", Namespace="http://www.veds.org/acn/3.1")]
    [XmlRoot("CrashPerson", Namespace="http://www.veds.org/acn/3.1", IsNullable=true)]
    public partial class CrashPersonType1 : CrashPersonType {

        /// <summary>
        /// A sequential identification assigned to each person involved in a crash or other incident. 
        /// First person has the value 0, second person has the value 1, etc.
        /// </summary>
        [XmlElement("CrashPersonIdentification", IsNullable=true)]
        public IdentificationType[] CrashPersonIdentification;

        /// <summary>
        /// Describes the role of any person involved in the crash or other incident.
        /// </summary>
        [XmlElement("CrashPersonRoleCode", IsNullable=true)]
        public CrashPersonRoleCodeType[] CrashPersonRoleCode;
        
        /// <summary>
        /// To Be Determined (TBD)
        /// </summary>
        [XmlElement("GlasgowComaScaleValue", IsNullable=true)]
        public nonNegativeInteger[] GlasgowComaScaleValue;
    }
    
    /// <summary>
    /// Contains information about a person involved in the crash
    /// </summary>
    [XmlInclude(typeof(CrashPersonType1))]
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/domains/jxdm/4.1")]
    public partial class CrashPersonType : ComplexObjectType {

        /// <summary>
        /// Reference to a CrashPersonRoleCodeType object.
        /// </summary>
        [XmlElement(Namespace="http://niem.gov/niem/niem-core/2.0")]
        public ReferenceType RoleOfPersonReference;
    }
    
    /// <summary>
    /// Contains information about a vehicle involved in the crash
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://www.veds.org/acn/3.1")]
    [XmlRoot("CrashVehicle", Namespace="http://www.veds.org/acn/3.1", IsNullable=true)]
    public partial class CrashVehicleType : VehicleType {
        
        /// <summary>
        /// Contains data about the airbags
        /// </summary>
        [XmlElement("Airbag", IsNullable=true)]
        public AirbagType[] Airbag;

        /// <summary>
        /// USDOT assigned vehicle number (if commercial); USDOT value could be used for other 
        /// purposes, i.e., LoJack, OnStar, etc. Format: seven digits (NNNNNNN)
        /// </summary>
        [XmlElement(Namespace="http://niem.gov/niem/domains/jxdm/4.1", IsNullable=true)]
        public CommercialCarrierUSDOTNumberType CommercialCarrierUSDOTNumber;

        /// <summary>
        /// Indicates whether a vehicle is a convertible.
        /// </summary>
        [XmlElement(IsNullable=true)]
        public boolean ConvertibleIndicator;
        
        /// <summary>
        /// Contains links to images of the vehicle 
        /// </summary>
        [XmlElement("Image", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
        public ImageType[] Image;

        /// <summary>
        /// Vehicle Body Type
        /// </summary>
        [XmlElement(Namespace="http://niem.gov/niem/domains/jxdm/4.1", IsNullable=true)]
        public VehicleBodyCategoryCodeType VehicleBodyCategoryCode;

        /// <summary>
        /// Based on the SAE International’s Standard J3016, this code list classifies a system’s level 
        /// of sophistication
        /// </summary>
        [XmlElement(IsNullable=true)]
        public VehicleAutonomousCapabilityCodeType VehicleAutonomousModeCode;

        /// <summary>
        /// Crash data about the impact
        /// </summary>
        [XmlElement(IsNullable=true)]
        public VehicleCrashPulseType VehicleCrashPulse;

        /// <summary>
        /// True indicates that the vehicle has detected that the human driver was engaged (e.g., hands 
        /// on the wheel, eyes on the road) at the time that the data was collected during the crash.
        /// </summary>
        [XmlElement(IsNullable=true)]
        public boolean VehicleHumanDriverEngagedIndicator;
        
        /// <summary>
        /// To Be Determined (TBD)
        /// </summary>
        [XmlElement(IsNullable=true)]
        public boolean VehiclePedestrianProtectionDeviceDeployedIndicator;
        
        /// <summary>
        /// Indicates how propulsion energy is stored for the vehicle
        /// </summary>
        [XmlElement("VehiclePropulsionStorageCode", IsNullable=true)]
        public VehiclePropulsionStorageCodeType[] VehiclePropulsionStorageCode;

        /// <summary>
        /// Is Roll Bar Deployed?
        /// </summary>
        [XmlElement(IsNullable=true)]
        public boolean VehicleRollbarDeployedIndicator;

        /// <summary>
        /// Indicates if the vehicle rolled over.
        /// </summary>
        [XmlElement(IsNullable=true)]
        public boolean VehicleRolloverIndicator;

        /// <summary>
        /// Indicates seatbelt and seat sensor data for individual seat positions in the vehicle. 
        /// /// </summary>
        [XmlElement("VehicleSeat", IsNullable=true)]
        public VehicleSeatType[] VehicleSeat;

        /// <summary>
        /// Indicates un-laden weight of vehicle measured in pounds.
        /// </summary>
        [XmlElement(Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
        public WeightMeasureType VehicleUnladenWeightMeasure;
    }
    
    /// <summary>
    /// Class for describing an airbag
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://www.veds.org/acn/3.1")]
    [XmlRoot("Airbag", Namespace="http://www.veds.org/acn/3.1", IsNullable=true)]
    public partial class AirbagType : ComplexObjectType {

        /// <summary>
        /// Categorizes this airbag.
        /// </summary>
        [XmlElement("AirbagCategoryCode", IsNullable=true)]
        public AirbagCategoryCodeType[] AirbagCategoryCode;

        /// <summary>
        /// Indicates if this airbag is deployed.
        /// </summary>
        [XmlElement("AirbagDeployedIndicator", IsNullable=true)]
        public boolean[] AirbagDeployedIndicator;
    }
    
    /// <summary>
    /// Contains image information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    [XmlRoot("Image", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
    public partial class ImageType : BinaryType {
    }
    
    /// <summary>
    /// Base class for the ImageType class. Contains the location of the binary data.
    /// </summary>
    [XmlInclude(typeof(ImageType))]
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    public partial class BinaryType : ComplexObjectType {
        
        /// <summary>
        /// Contains a URI to the image
        /// </summary>
        [XmlElement(IsNullable=true)]
        public anyURI BinaryLocationURI;
    }
    
    /// <summary>
    /// Describes a seat in a vehicle
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://www.veds.org/acn/3.1")]
    [XmlRoot("VehicleSeat", Namespace="http://www.veds.org/acn/3.1", IsNullable=true)]
    public partial class VehicleSeatType : ComplexObjectType {
        
        /// <summary>
        /// Indicates seat location in the vehicle
        /// </summary>
        [XmlElement("VehicleSeatLocationCategoryCode", IsNullable=true)]
        public VehicleSeatLocationCategoryCodeType[] VehicleSeatLocationCategoryCode;

        /// <summary>
        /// Indicates if this seat sensor determines seat is occupied.
        /// </summary>
        [XmlElement("VehicleSeatOccupiedIndicator", IsNullable=true)]
        public boolean[] VehicleSeatOccupiedIndicator;

        /// <summary>
        /// Indicates if this seatbelt is fastened.
        /// </summary>
        [XmlElement("VehicleSeatbeltFastenedIndicator", IsNullable=true)]
        public boolean[] VehicleSeatbeltFastenedIndicator;

        /// <summary>
        /// Indicates if this seatbelt is being monitored.
        /// </summary>
        [XmlElement("VehicleSeatbeltMonitoredIndicator", IsNullable=true)]
        public boolean[] VehicleSeatbeltMonitoredIndicator;
    }
    
    /// <summary>
    /// Class for describing a weight measure
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    [XmlRoot("VehicleUnladenWeightMeasure", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
    public partial class WeightMeasureType : MeasureType {
    }
    
    /// <summary>
    /// Describes a vehicle
    /// </summary>
    [XmlInclude(typeof(CrashVehicleType))]
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    public partial class VehicleType : ConveyanceType {

        /// <summary>
        /// Indicates Vehicle Interior Color.
        /// </summary>
        [XmlElement(IsNullable=true)]
        public TextType VehicleColorInteriorText;

        /// <summary>
        /// Vehicle Identification Number (VIN), length of 17 characters.
        /// </summary>
        [XmlElement(IsNullable=true)]
        public IdentificationType VehicleIdentification;
    }
    
    /// <summary>
    /// Contains a vehicle license plate number
    /// </summary>
    [XmlInclude(typeof(VehicleType))]
    [XmlInclude(typeof(CrashVehicleType))]
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    public partial class ConveyanceType : TangibleItemType {

        /// <summary>
        /// Indicates license plate number of vehicle.
        /// </summary>
        [XmlElement(IsNullable=true)]
        public IdentificationType ConveyanceRegistrationPlateIdentification;
    }
    
    /// <summary>
    /// Used for describing vehicles
    /// </summary>
    [XmlInclude(typeof(ConveyanceType))]
    [XmlInclude(typeof(VehicleType))]
    [XmlInclude(typeof(CrashVehicleType))]
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    public partial class TangibleItemType : ItemType {
        
        /// <summary>
        /// Specifies the primary and/or secondary vehicle colors
        /// </summary>
        [XmlElement("ConveyanceColorPrimaryText", typeof(TextType), IsNullable=true)]
        [XmlElement("ConveyanceColorSecondaryText", typeof(TextType), IsNullable=true)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public TextType[] Items;
        
        /// <summary>
        /// 
        /// </summary>
        [XmlElement("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType[] ItemsElementName;

        /// <summary>
        /// Indicates vehicle make, e.g., Cadillac, Ford
        /// </summary>
        [XmlElement(IsNullable=true)]
        public ProperNameTextType ItemMakeName;

        /// <summary>
        /// Indicates vehicle model, e.g., Escalade, Taurus
        /// </summary>
        [XmlElement(IsNullable=true)]
        public ProperNameTextType ItemModelName;

        /// <summary>
        /// Indicates vehicle model year, e.g., 2002
        /// </summary>
        [XmlElement(IsNullable=true)]
        public gYear ItemModelYearDate;
    }
    
    /// <summary>
    /// Enumeration that specifies a color is the primary or secondary color of a vehicle
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0", IncludeInSchema=false)]
    public enum ItemsChoiceType {
        
        /// <remarks/>
        ConveyanceColorPrimaryText,
        
        /// <remarks/>
        ConveyanceColorSecondaryText,
    }
    
    /// <summary>
    /// 
    /// </summary>
    [XmlInclude(typeof(TangibleItemType))]
    [XmlInclude(typeof(ConveyanceType))]
    [XmlInclude(typeof(VehicleType))]
    [XmlInclude(typeof(CrashVehicleType))]
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    public partial class ItemType : ComplexObjectType {
    }
    
    /// <summary>
    /// Contains contact information
    /// </summary>
    [Serializable()]
    [XmlType(TypeName="ContactInformationType", Namespace="http://www.veds.org/acn/3.1")]
    [XmlRoot("ContactInformation", Namespace="http://www.veds.org/acn/3.1", IsNullable=true)]
    public partial class ContactInformationType1 : ContactInformationType {

        /// <summary>
        /// ID for each emergency contact: 0 to infinity
        /// </summary>
        [XmlElement("ContactIdentification", IsNullable=true)]
        public IdentificationType[] ContactIdentification;
    }
    
    /// <summary>
    /// Contains contact information
    /// </summary>
    [XmlInclude(typeof(ContactInformationType1))]
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    public partial class ContactInformationType : ComplexObjectType {

        // This was the code that was generated by xsd.exe. The object array can contain any
        // number of ContactEmailID, ContactMailingAddress and ContactTelephone number elements.
        // This type of down casting is difficult to use so the object array has been replaced
        // with individual arrays of ContactEmailID, ContactMailingAddress and ContactTelephone number
        // arrays.
        //[XmlElement("ContactEmailID", typeof(@string), IsNullable=true)]
        //[XmlElement("ContactMailingAddress", typeof(AddressType), IsNullable=true)]
        //[XmlElement("ContactTelephoneNumber", typeof(TelephoneNumberType), IsNullable=true)]
        //public object[] Items;

        /// <summary>
        /// Array of ContactEmailID elements.
        /// </summary>
        [XmlElement("ContactEmailID")]
        public @string[] ContactEmailID;

        /// <summary>
        /// Array of ContactMailingAddress elements
        /// </summary>
        [XmlElement("ContactMailingAddress")]
        public AddressType[] ContactMailingAddress;

        /// <summary>
        /// Array of ContactTelephoneNumber elements
        /// </summary>
        [XmlElement("ContactTelephoneNumber")]
        public TelephoneNumberType[] ContactTelephoneNumber;

        /// <summary>
        /// Describes the contact entity
        /// </summary>
        [XmlElement(IsNullable=true)]
        public TextType ContactEntityDescriptionText;
    }
    
    /// <summary>
    /// Class for associating an activity with a location
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/domains/jxdm/4.1")]
    [XmlRoot("ActivityLocationAssociation", Namespace="http://niem.gov/niem/domains/jxdm/4.1", IsNullable=true)]
    public partial class ActivityLocationAssociationType : AssociationType {
        
        /// <summary>
        /// Reference to an Activity derived object.
        /// </summary>
        [XmlElement("ActivityReference", Namespace="http://niem.gov/niem/niem-core/2.0")]
        public ReferenceType[] ActivityReference;
        
        /// <summary>
        /// Reference to a Location object
        /// </summary>
        [XmlElement("LocationReference", Namespace="http://niem.gov/niem/niem-core/2.0")]
        public ReferenceType[] LocationReference;
    }
    
    /// <summary>
    /// Class for specifying the beginning and end dates of an association between objects
    /// </summary>
    [XmlInclude(typeof(PersonContactInformationAssociationType))]
    [XmlInclude(typeof(OrganizationContactInformationAssociationType))]
    [XmlInclude(typeof(ActivityLocationAssociationType))]
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    public partial class AssociationType : ComplexObjectType {
        
        /// <remarks/>
        [XmlElement("AssociationBeginDate", IsNullable=true)]
        public DateType[] AssociationBeginDate;
        
        /// <remarks/>
        [XmlElement("AssociationEndDate", IsNullable=true)]
        public DateType[] AssociationEndDate;
    }
    
    /// <summary>
    /// Class for associating a Person object with a ContactInformation object
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    [XmlRoot("PersonContactInformationAssociation", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
    public partial class PersonContactInformationAssociationType : AssociationType {
        
        /// <summary>
        /// Reference to a Person object
        /// </summary>
        [XmlElement("PersonReference")]
        public ReferenceType[] PersonReference;
        
        /// <summary>
        /// Reference to a ContactInformation object
        /// </summary>
        [XmlElement("ContactInformationReference")]
        public ReferenceType[] ContactInformationReference;
        
        /// <summary>
        /// If true then the referenced contact is the primary contact
        /// </summary>
        [XmlElement("ContactInformationIsPrimaryIndicator", IsNullable=true)]
        public boolean[] ContactInformationIsPrimaryIndicator;
        
        /// <summary>
        /// If true then the referenced contact is a home contact
        /// </summary>
        [XmlElement("ContactInformationIsHomeIndicator", IsNullable=true)]
        public boolean[] ContactInformationIsHomeIndicator;
        
        /// <summary>
        /// If true then the referrenced contact is a work related contact
        /// </summary>
        [XmlElement("ContactInformationIsWorkIndicator", IsNullable=true)]
        public boolean[] ContactInformationIsWorkIndicator;
        
        /// <summary>
        /// If true then the referrenced contact is an emergency contact
        /// </summary>
        [XmlElement("ContactInformationIsEmergencyIndicator", IsNullable=true)]
        public boolean[] ContactInformationIsEmergencyIndicator;
        
        /// <summary>
        /// If true then the referenced contact is a day time contact
        /// </summary>
        [XmlElement("ContactInformationIsDayIndicator", IsNullable=true)]
        public boolean[] ContactInformationIsDayIndicator;
        
        /// <summary>
        /// If true then the referenced contact is an evening contact
        /// </summary>
        [XmlElement("ContactInformationIsEveningIndicator", IsNullable=true)]
        public boolean[] ContactInformationIsEveningIndicator;
        
        /// <summary>
        /// If true then the referenced contact is a night time contact
        /// </summary>
        [XmlElement("ContactInformationIsNightIndicator", IsNullable=true)]
        public boolean[] ContactInformationIsNightIndicator;
    }
    
    /// <summary>
    /// Class for associating an organization object with ContactInformation object
    /// </summary>
    [Serializable()]
    [XmlType(Namespace="http://niem.gov/niem/niem-core/2.0")]
    [XmlRoot("OrganizationContactInformationAssociation", Namespace="http://niem.gov/niem/niem-core/2.0", IsNullable=true)]
    public partial class OrganizationContactInformationAssociationType : AssociationType {
        
        /// <summary>
        /// Reference to an organization related object
        /// </summary>
        [XmlElement("OrganizationReference")]
        public ReferenceType[] OrganizationReference;
        
        /// <summary>
        /// Reference to a ContactInformation object
        /// </summary>
        [XmlElement("ContactInformationReference")]
        public ReferenceType[] ContactInformationReference;

        /// <summary>
        /// If true then the referenced contact is the primary contact
        /// </summary>
        [XmlElement("ContactInformationIsPrimaryIndicator", IsNullable=true)]
        public boolean[] ContactInformationIsPrimaryIndicator;

        /// <summary>
        /// If true then the referrenced contact is an emergency contact
        /// </summary>
        [XmlElement("ContactInformationIsEmergencyIndicator", IsNullable=true)]
        public boolean[] ContactInformationIsEmergencyIndicator;

        /// <summary>
        /// If true then the referenced contact is a day time contact
        /// </summary>
        [XmlElement("ContactInformationIsDayIndicator", IsNullable=true)]
        public boolean[] ContactInformationIsDayIndicator;

        /// <summary>
        /// If true then the referenced contact is an evening contact
        /// </summary>
        [XmlElement("ContactInformationIsEveningIndicator", IsNullable=true)]
        public boolean[] ContactInformationIsEveningIndicator;

        /// <summary>
        /// If true then the referenced contact is a night time contact
        /// </summary>
        [XmlElement("ContactInformationIsNightIndicator", IsNullable=true)]
        public boolean[] ContactInformationIsNightIndicator;
    }
}
