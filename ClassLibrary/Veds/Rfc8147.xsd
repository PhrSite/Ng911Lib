<?xml version="1.0"?>
<!-- 
    This XSD file was originally taken from RFC 8147. It was modified for the following reasons.
        1.) The original schema was ambiguous and Visual Studio 2022 generated warnings when
            viewing this file.
        2.) The cardinality of the request element in the controlType must be set to
            minoccurs="0" maxoccurs="unbounded".
        3.) The VS 2022 xsd.exe utility did not generate any classes for the schema.
        
    The modifications match the text describing the schema in RFC 8147 and result in valid
    classes being generated by xsd.exe.
-->
<xs:schema targetNamespace="urn:ietf:params:xml:ns:EmergencyCallData:control" xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:pi="urn:ietf:params:xml:ns:EmergencyCallData:control" xmlns:xml="http://www.w3.org/XML/1998/namespace" 
    elementFormDefault="qualified" attributeFormDefault="unqualified">
    <xs:import namespace="http://www.w3.org/XML/1998/namespace"/>
    
    <xs:element name="EmergencyCallData.Control" type="pi:controlType"/>

    <xs:complexType name="controlType">
        <xs:sequence>
            <xs:element name="capabilities" type="pi:capabilitiesType"/>
            <xs:element name="request" type="pi:requestType" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="ack" type="pi:ackType"/>
            <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:anyAttribute namespace="##other" processContents="lax" />
    </xs:complexType>
    
<!--    
    <xs:complexType name="controlType">
        <xs:complexContent>
            <xs:restriction base="xs:anyType">
                <xs:choice>
                    <xs:element name="capabilities" type="pi:capabilitiesType"/>
                    <xs:element name="request" type="pi:requestType"/>
                    <xs:element name="ack" type="pi:ackType"/>
                    <xs:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
                </xs:choice>
                <xs:anyAttribute/>
            </xs:restriction>
        </xs:complexContent>
    </xs:complexType>
-->

    <xs:complexType name="ackType">
        <xs:sequence>
            <xs:element name="actionResult" minOccurs="0" maxOccurs="unbounded">
                <xs:complexType>
                    <xs:attribute name="action" type="xs:token" use="required"/>
                    <xs:attribute name="success" type="xs:boolean" use="required"/>
                    <xs:attribute name="reason" type="xs:token">
                        <xs:annotation>
                            <xs:documentation>
                                conditionally mandatory when success="false" to indicate reason code for a failure
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="details" type="xs:string"/>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="ref" type="xs:anyURI" use="required"/>
        <xs:attribute name="received" type="xs:boolean"/>
    </xs:complexType>
    
<!--    
    <xs:complexType name="ackType">
        <xs:complexContent>
            <xs:restriction base="xs:anyType">
                <xs:sequence minOccurs="1" maxOccurs="unbounded">
                    <xs:element name="actionResult" minOccurs="0" maxOccurs="unbounded">
                        <xs:complexType>
                            <xs:attribute name="action" type="xs:token" use="required"/>
                            <xs:attribute name="success" type="xs:boolean" use="required"/>
                            <xs:attribute name="reason" type="xs:token">
                                <xs:annotation>
                                    <xs:documentation>
                                        conditionally mandatory
                                        when @success="false"
                                        to indicate reason code
                                        for a failure
                                    </xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                            <xs:attribute name="details" type="xs:string"/>
                            <xs:anyAttribute processContents="skip"/>
                        </xs:complexType>
                    </xs:element>
                    <xs:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
                <xs:attribute name="ref" type="xs:anyURI" use="required"/>
                <xs:attribute name="received" type="xs:boolean"/>
                <xs:anyAttribute/>
            </xs:restriction>
        </xs:complexContent>
    </xs:complexType>
-->

    <xs:complexType name="capabilitiesType">
        <xs:sequence>
            <xs:element name="request" type="pi:requestType" minOccurs="1" maxOccurs="unbounded"/>
            <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:anyAttribute namespace="##other" processContents="lax"/>
    </xs:complexType>

        <!--    
    <xs:complexType name="capabilitiesType">
        <xs:complexContent>
            <xs:restriction base="xs:anyType">
                <xs:sequence minOccurs="1" maxOccurs="unbounded">
                    <xs:element name="request" type="pi:requestType" minOccurs="1" maxOccurs="unbounded"/>
                    <xs:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
                <xs:anyAttribute/>
            </xs:restriction>
        </xs:complexContent>
    </xs:complexType>
-->

    <xs:complexType name="requestType">
        <xs:sequence>
            <xs:element name="text" minOccurs="0" maxOccurs="unbounded">
                <xs:complexType>
                    <xs:simpleContent>
                        <xs:extension base="xs:string">
                            <xs:anyAttribute namespace="##any" processContents="skip"/>
                        </xs:extension>
                    </xs:simpleContent>
                </xs:complexType>
            </xs:element>
            <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="action" type="xs:token" use="required"/>
        <xs:attribute name="int-id" type="xs:unsignedInt"/>
        <xs:attribute name="persistence" type="xs:duration"/>
        <xs:attribute name="datatype" type="xs:token"/>
        <xs:attribute name="supported-values" type="xs:string"/>
        <xs:attribute name="element-id" type="xs:token"/>
        <xs:attribute name="requested-state" type="xs:token"/>
        <xs:anyAttribute namespace="##other" processContents="lax"/>
    </xs:complexType>

<!--    
    <xs:complexType name="requestType">
        <xs:complexContent>
            <xs:restriction base="xs:anyType">
                <xs:choice minOccurs="1" maxOccurs="unbounded">
                    <xs:element name="text" minOccurs="0" maxOccurs="unbounded">
                        <xs:complexType>
                            <xs:simpleContent>
                                <xs:extension base="xs:string">
                                    <xs:anyAttribute namespace="##any" processContents="skip"/>
                                </xs:extension>
                            </xs:simpleContent>
                        </xs:complexType>
                    </xs:element>
                    <xs:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
                </xs:choice>
                <xs:attribute name="action" type="xs:token" use="required"/>
                <xs:attribute name="int-id" type="xs:unsignedInt"/>
                <xs:attribute name="persistence" type="xs:duration"/>
                <xs:attribute name="datatype" type="xs:token"/>
                <xs:attribute name="supported-values" type="xs:string"/>
                <xs:attribute name="element-id" type="xs:token"/>
                <xs:attribute name="requested-state" type="xs:token"/>
                <xs:anyAttribute/>
            </xs:restriction>
        </xs:complexContent>
    </xs:complexType>
-->    
    
</xs:schema>    
                
                